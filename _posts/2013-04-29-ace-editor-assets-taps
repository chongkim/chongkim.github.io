---
layout: post
title: Ace Editor, Assets, taps
date: 2013-04-29 15:54:00
categories: update programming
---
Just added the Ace editor into my blog.  It was quite an ordeal getting the content passed from the editor into the textarea so it can be processed by Rails.  The trick was to set up javascript to copy the data from the textarea to the editor and then pass it back from the editor to the textarea on submit.\r\n\r\nFinally determined that I have to precompile my assets before pushing out to heroku blog site.  I have a little bit of texture for the background.  Now that it is able to access the CSS and javascript, I can start doing something useful with it.\r\n\r\nI installed a gem called `taps`.  It allows you to easily import and export the database.  Once installed, you type `heroku db:pull`.  You can also do `heroku db:push`.  I have my production and development databases synched up.\r\n\r\nFunny thing happened today.  In the morning, the person entering the room has to greet everyone else.  I went around and bumped fists and shook hands.  When I got to Megan, I didn't recognize her because she changed her hair.  It was darker and in a different style.  I went to her and introduced myself causing the room to burst out laughing.	2013-04-29 19:59:25.871654	2013-04-30 13:56:54.392633	
88	HTTP Server In Ruby Using BDD	I wrote a rudimentary HTTP server and practiced writing it for the past few days.  I used Screenflow to record and replayed it in fast motion so I can see what I was doing.  Going through it several times, you make a lot of mistakes and see pretty much every variation of errors you would encounter for that project.  I learned a lot and kept my code to the bare minimum.  You can see the code on [github](https://github.com/chongkim/httpd-ruby-bdd)\r\n\r\nIt uses Cucumber to set up the expected behavior.  Then I jump into RSpec to start implementing the guts.  When all the RSpec tests pass, I check on Cucumber again to see if I was able to accomplish my goal.  The server only handles one request, but you can keep modifying it to make it more robust and add more features.\r\n\r\n<iframe width="560" height="315" src="//www.youtube.com/embed/OsrV5MOBkUI?rel=0" frameborder="0" allowfullscreen></iframe>	2013-07-08 15:08:22.074786	2013-07-16 12:01:53.015591	2013-07-08 18:31:52
15	Discovering Bootstrap	[Alejandra](http://alejandraluaces.com/) mentioned that I should use Bootstrap to make my site look better.  I few days later I downloaded it.  It wasn't what I was expecting.  I thought it was going to be a set of programs to generate CSS, instead it's a set of css, javascript and images. I place those into my `app/assets` directory.  It made some suble changes to my site.  It wasn't noticeable right away, but then I started to notice that my buttons look different -- there is a gradient.  The font looks a bit better.  It's kinda nice.  I'm looking around the web to find tutorials to find out how to set up my site with the right class labels.	2013-04-30 14:58:21.887391	2013-05-01 13:57:28.438482	2013-04-30 10:21:00
35	Ruby Java Clojure Integration	I have ruby, java and clojure set up in my rails app.  I'm using jruby and I'm able to load the jar file created from clojure.  Here's what I did.\r\n\r\n```bash\r\n$ rvm install jruby\r\n$ rvm use jruby\r\n$ brew install clojure\r\n$ brew install leiningen\r\n$ lein new default ttt  # this will also create function foo in ttt/core.clj\r\n$ lein uberjar   # this will create a standalone jar file in directory "target"\r\n```\r\n\r\nThen you edit the `Gemfile` to include\r\n\r\n```ruby\r\ngem "jrclj"\r\n```\r\n\r\nCreate a file `a.rb` with the following sample code\r\n\r\n```ruby\r\n#!/usr/bin/env ruby\r\n\r\nrequire 'java'\r\n\r\nDir["#{File.dirname(__FILE__)}/ttt/target/*.jar"].each do |jar|\r\n  require jar\r\nend\r\n\r\nrequire 'jrclj'\r\n\r\nclj = JRClj.new "ttt.core"\r\nclj.foo "chong"\r\n```\r\n\r\nExecute the code and you should see\r\n\r\n```\r\nchong Hello, World!\r\n```\r\n\r\nI have everything I need to create the Rails Tic Tac Toe.	2013-05-22 18:07:39.596428	2013-05-23 14:45:40.125676	2013-05-22 21:55:11
92	Apple keyboard ß	If you press Option-s on an Apple keyboard, you'll get "ß".  It looks like the letter "B" or the Greek beta but it's actually a German sharp S, a ligature of "ss" or "sz".  It was used in other language, but it only survives in German.\r\n\r\nUp until the 1800s, a medial s, which looks like ſ, used to be in the alphabet.  It's the letter s found only when it's inside a word.  When it's found on either end, it is called a terminal s.  Even before we got rid of it, most of the world had gotten rid of it by the mid 1700s.  The main reason was because it can get confused with the letter f.  Notice that ſ either has no line going through or a line going half-way through depending on the font, while f has a line that goes completely through.\r\n\r\nHere's a picture from the U.S. Bill of Right with both a medial s and terminal s.\r\n\r\n![A picture of medial S](http://upload.wikimedia.org/wikipedia/commons/3/3d/Long-s-US-Bill-of-Rights.jpg)\r\n\r\nWhen you fuse the medial and terminal s together, you form ß.	2013-07-22 19:22:26.265381	2013-07-22 19:35:28.193074	2013-07-22 23:04:02
4	Gap in Coverage	Jury duty at Hillsborough County Courthouse. Was achy from playing tennis on two days ago.  Wasn't selected.  Was able to get some work done while waiting.\r\n\r\nI was able to refactor the code so that `ComputerPlayer` contains all the logic of calculating the best move.  `Board` is just a functional board with the responsibility of setting up the board and moving the pieces.\r\n\r\nI use code coverage with simplecov.  This was after I discovered that my rspec passed but threw an exception because of untested code.  This was the second time (see 4/20/2013 post). It was untested due to aggressive use of stubs.  I added those stubs because the tests were taking too long for certain calculations.  I figured it was okay to stub those methods since it was being tested elsewhere.  The problem happens when you refactor and methods aren't where they're supposed to be.  The code coverage detected the gap. I also removed all stubs except for `puts`, `print`, `gets`.\r\n\r\nAs soon as I got home I fell asleep right away.  It was really difficult to sit still on a hard bench while my body is aching.  I just wanted to lie down the whole time.  When I woke up, I tried out rspec-prof but I didn't find it useful.  The output intermingled RSpec and the TicTacToe code and I couldn't make sense out of it.\r\n	2013-04-23 10:10:37.912695	2013-04-24 17:40:06.871905	2013-04-22 23:59:00
12	4x4 TicTacToe with Symmetry Lookup	Last night I finally finished a working version of the 4x4 TicTacToe program.  I had to add the symmetry lookup because it took too long for me to actually see how it plays.  Symmetry lookup takes the current position of the board and makes the 8 transformations\r\n\r\n* rotate 0\r\n* rotate 90\r\n* rotate 180\r\n* rotate 270\r\n* flip horizontal\r\n* flip vertical\r\n* flip on major diagonal\r\n* flip on minor diagonal\r\n\r\nand looks up the deep evaluation values.  Deep evaluation is evaluation of the position looking at all following moves whereas the evaluation looks only at the current position (i.e. it is the base case for the recursive deep evaluation).\r\n\r\nThis did speed it up and I was able to play after waiting about half an hour for the first move.  The game itself if not very interesting.  It's much too easy to tie because the burden of getting four in a row is easy to thwart by even the novice of players.\r\n\r\nI think this is enough for now.  I need to look into other aspects of this project, mainly getting an objective-c version.	2013-04-29 14:01:43.463264	2013-04-29 14:01:43.463264	2013-04-29 09:24:00
17	Learning Vim	I knew vi from way back.  I've used it time to time, but I thought it was time to get serious and start using vim for real.  I decided to use vim for a week as my sole editor.  After googling around the web, I realized I should start from the beginning and typed:\r\n\r\n```bash\r\n$ vimtutor\r\n```\r\n\r\nI discovered `ctrl-d`.  In command mode (when you hit the `:`), `ctrl-d` will list all the available commands.  You can start typing a few letters of the command and press `ctrl-d` again and see them filtered.  You can also do this with filenames when you do `:e`.\r\n\r\nLearned about the `it` (inner tag) selection and in the process found out about the other object object selections.  I see a lot of speed up potential to my editting with these.  Do a `:h object-select`\r\n\r\nI also learned that there is a user manual if you do `:h user-manual`.  You can get there with tab completion by doing `:h user<tab>`.\r\n\r\nGoogling around, I found visual block mode via `ctrl-v`, which allows you to do column editting.  It is built into vim.  Don't know how I missed this one.\r\n\r\nProbably for the nth time, I got onto tpope's github site for some vim script.  I realized I should just go through his whole repository and look for stuff than to google for random scripts.  Noteably, `vim-surround`looks useful.\r\n\r\nI got [snipMate](https://github.com/garbas/vim-snipmate) installed.  One annoying problem I encountered was that the indentation is done with `<tab>`s.  Found that I just needed to add this to my .vimrc:\r\n\r\n```vim\r\nset expandtab\r\nset ts=2\r\n```\r\n\r\n`set expandtab` will automatically convert tabs to spaces.  `set ts=2` sets the tab stops to be 2.  The effect of these two options will put two spaces instead of `<tab>`.\r\n\r\nProbably the most useful command I discovered is `:map`.  It will show you the key mapping.  Here is a sample output\r\n\r\n```\r\nn  <D-E>         :RerunSpec<CR>\r\nn  <D-L>         :RunSpecLine<CR>\r\nn  <D-R>         :RunSpec<CR>\r\nx  S             <Plug>VSurround\r\nn  \\\\u           <Plug>CommentaryUndo\r\nn  \\\\\\           <Plug>CommentaryLine\r\nn  \\\\            <Plug>Commentary\r\nx  \\\\            <Plug>Commentary\r\nn  cs            <Plug>Csurround\r\nn  ds            <Plug>Dsurround\r\nn  gx            <Plug>NetrwBrowseX\r\nx  gS            <Plug>VgSurround\r\n```\r\n\r\nThe first column looks like the mode.  `n` is normal.  I believe `x` might be some extension.\r\n\r\nDiscovered that `ctrl-x ctrl-n` does word completion in insert mode.	2013-05-02 14:15:37.583061	2013-05-02 14:23:23.191063	2013-05-02 09:36:00
14	Assets again	Yesterday, I thought I figured out what I needed to do in order to get assets working on heroku.  Today, I modified the CSS in `app/assets/css` and pushed it out to heroku without running `bundle exec rake assets:precompile`.  It worked anyway.  I saw from the output\r\n\r\n```\r\n...\r\n-----> Preparing app for Rails asset pipeline\r\n       Running: rake assets:precompile\r\n       Asset precompilation completed (25.81s)\r\n...\r\n```\r\n\r\nThe difference was that in this push, I deleted all the files in `public/assets` and committed those deletes.  I suspect that Rails sees that the directory is empty and runs the `rake assets:precompile`.  This is good news.  This means I don't need to precompile and check in those compiled assets.  That's less files to keep track of and one step less in the deploy process.\r\n\r\nThe site is starting to look prettier.  Still a lot more work to do before it starts looking like something people would want to visit.	2013-04-30 14:14:17.282351	2013-04-30 14:20:12.784271	2013-04-30 10:05:00
9	Tic Tac Toe evaluate optimization	I had a thought that I can do a better job of evaluating the position in my Tic Tac Toe game.  For each unevaluated position, I go through all the rows, columns and diagonals and check for` xxx` or `ooo`.  I realized I can do something clever by only evaluating on a move.  I only need to check the row of the last move and the column.  I only check the major and minor diagonals if the last move lies on the diagonal.  The change doubled the speed.\r\n\r\nI still needed to keep the original code so I can evaluate the initial position since there is no last move.	2013-04-26 14:23:36.379765	2013-04-26 14:23:36.379765	2013-04-26 10:15:00
6	Redcarpet and Pygments	Decided on Redcarpet over RedCloth and BlueCloth.  Redcarpet has a lot more flexibility in that it allows you to modify post processing of certain areas.  I was interested in fenced code blocks.  This is where you want to specify blocks of code delimited by ```.  I want to add syntax highlighting, which is where pyments come in.\r\n\r\nTo set up Redcarpet.\r\n\r\n1. `gem install redcarpet`\r\n2. Edit apps/helpers/application_helper.rb\r\n\r\n```ruby\r\nmodule ApplicationHelper\r\n  def markdown\r\n    @markdown ||= Redcarpet::Markdown.new(Redcarpet::Render::HTML, :fenced_code_blocks => true)\r\n  end\r\nend\r\n```\r\n\r\n3. Use it in the view\r\n\r\n```ruby\r\n<%= raw(markdown.render(content)) %>\r\n```\r\n\r\nTo set up pygments\r\n\r\n1. `gem install pygments.rb`\r\n2. Modify apps/helpers/application_helper.rb\r\n\r\n```ruby\r\nclass HTMLwithPygments < Redcarpet::Render::HTML\r\n  def block_code(code, language)\r\n    Pygments.highlight(code, :lexer => language)\r\n  end\r\nend\r\n\r\nmodule ApplicationHelper\r\n  def markdown\r\n    @markdown ||= Redcarpet::Markdown.new(HTMLwithPygments, fenced_code_blocks: true)\r\n  end\r\nend\r\n```\r\n\r\nI didn't have too much trouble getting this installed.  It was hard to detect that this was working because it doesn't specify the css files so the processed text didn't show colors.  I installed py33-pygments (`sudo port install py33-pygments`) so I can run `pygmentize-3.3`.  Here's the command that generated my css files:\r\n\r\n```bash\r\n$ pygmentize-3.3 -S default -f html > style.css\r\n```\r\n\r\nTo get a list of styles you can do:\r\n\r\n```bash\r\n$ pygmentize-3.3 -L styles\r\nPygments version 1.6, (c) 2006-2013 by Georg Brandl.\r\n\r\nStyles:\r\n`~~~~~~~\r\n* autumn:\r\n    A colorful style, inspired by the terminal highlighting style.\r\n* monokai:\r\n    This style mimics the Monokai color scheme.\r\n* rrt:\r\n    Minimalistic "rrt" theme, based on Zap and Emacs defaults.\r\n...\r\n```\r\n\r\nMy site is still not ready for prime time.  Need to look into bootstrap to add good looking css.  Found out that Github uses pygments so it would be nice to have my code look like Github's.	2013-04-25 15:22:24.23551	2013-04-25 15:48:43.490144	2013-04-24 14:59:00
7	Fizzbuzz kata	Will spent some time with me and Megan doing pair programming of the Fizzbuzz kata using TDD (Test Driven Development).  We had to write a failing test first (in Cucumber).  Then make it pass.  Megan and I took turns.  Here is the rules for Fizzbuzz:\r\n\r\n* If it's a multiple of 3, then say "Fizz"\r\n* if it's a multiple of 5, then say "Buzz"\r\n* if it's a multiple of 3 and 5, then say "Fizzbuzz"\r\n* if none of these apply, then say the say the input number.\r\n\r\nWe got it working in short order.  Megan had trouble with her arrow keys in vim.  It was working but now it is doing funky things like putting "A" and "B" and ruining her cursor position.  It turned out that she had\r\n\r\n```vim\r\nmap <Esc> :w<Cr>\r\n```\r\n\r\nThe directive was eating up the escape so that the escape sequence generated by the arrow keys are being consumed and leaving the rest of the sequence to appear on the screen.  We changed it to\r\n\r\n```vim\r\nmap <Esc><Esc> :w<Cr>\r\n```\r\n\r\nand everything is working fine.	2013-04-25 15:56:19.298747	2013-04-25 15:56:19.298747	2013-04-24 23:49:00
8	Tampa IGNITE	Went to Tampa IGNITE last night.  It started at 6:30pm and I got there late.  Traffic was worse than I expected and I had a hard time parking.  By the time my wife and I got to the theater, we missed the first third of the presentations.\r\n\r\nI saw Commissioner Sharpe talk about attracting people talented people to Tampa.  This included fixing downtown so it's easy to get to.  Unfortunately, his mike went dead in the middle of his talk so he had to speak aloud with no aid making it difficult to hear.\r\n\r\nWhat struck me about the event was how many people I recognized.  I saw Gavin Stark and Jason Perry (who won the Kindle raffle) from the Ruby Brigade meetup.  Talked to Ryan (met him at 8th Light talks and at the Hillsborough Hackathon).  Commissioner Sharpe was the presenter who awarded me and my team, PyBulls, with the first place at the [Hackathon](http://cltampa.com/dailyloaf/archives/2013/04/15/improving-hillsborough-county-with-a-hack-a-thon#.UXqHfitARbk), David Sewell of Pivotal Racing and of course everyone from 8th Light.\r\n\r\nI like how Tampa is honest with itself that Tampa has problems.  Seems like there is a movement with this generation to make things better.  I say generation because these events are just starting.  The Hackathon was the first one for the county.  Tampa IGNITE was the third one.	2013-04-26 14:15:17.479478	2013-04-26 14:15:17.479478	2013-04-26 09:45:00
11	Fixed my first bug in TicTacToe	Somehow as I played my TicTacToe game, I noticed it was not unbeatable.  It was unbeatable but somewhere along the way, I must've introduced a bug.  It was passing my RSpec so I knew I had to dig deeper.\r\n\r\nThe problem happened during one of my optimization phase where I was memoizing `@symmetries`.  This variable lived inside my ComputerPlayer class.  The ComputerPlayer is looking for the best move.  In order to limit the amount of search it needs to do, it finds all the symmetries of the current position, then it removes any moves that are symmetrical, ie redundant.  The symmetry is calculated and memoized until another move is made.  This was all fine and good when the code was living inside the Board class.  When I moved it out into the newly created ComputerPlayer, this was where it all went wrong.  The problem happens when it's the HumanPlayer's turn.  When the code was living inside Board, `@symmetries` was reset when either the HumanPlayer or the ComputerPlayer moved.  Now that it's inside ComputerPlayer, it only got reset when the computer moved.\r\n\r\nThe solution was to remove the memoized `@symmetries` and have it calculate it every time.  It wasn't such a bad thing because the calculation was not done that many times.  I came to this through the process of elimination.  Since the `@symmetries` was only known to ComputerPlayer, I can't reset this when the HumanPlayer moved or from anywhere outside of ComputerPlayer.  The ComputerPlayer has no way of knowing if anyone has moved.  For instance, I can call the symmetries method, modify the position of the board outside of ComputerPlayer, and the call the symmetries method again.  I would expect ComputerPlayer to find the symmetries for the updated position.\r\n\r\nIf the symmetries method took a long time and memoizing it was necessary, there is a way to do it without explicitly resetting the memoized variable from outside.  I could have a listener to the move method from Board.  So if anyone tried to move pieces on the board, I could go through the list of listeners and invoke any hooks.  This is a good general way to fix the problem.  I thought it was overkill.  I may do this in the future if I think it's necessary -- i.e. if I make extended version of the TicTacToe program.\r\n\r\nThis bug lead me to thinking about my TDD process.  How did this bug get introduced and yet pass the RSpec tests?  This passed because there was a missing test.  In this case, I wrote a failing test after finding the bug and fixed it but could I have foreseen this problem and written the test before?  It is difficult to say because I am not going to write a test for every possible move and even if I had written a test, there was no guarantee that the bug was going to trigger that branch of the tree of possible moves.\r\n\r\nI came out of this with two lessons.  One was to be very careful of memoized variables because refactoring can change the logic since it is dependent on state.  The second was that I should not memoize variables that are dependent on an outside object (the board, in my case) since those are subject to change state.  If you do, then you need to set up a listener so that you know when it has changed state.	2013-04-28 03:35:38.171379	2013-04-28 03:35:38.171379	2013-04-27 23:00:00
16	Learning Bootstrap, LiveReload, vim, etc.	Yesterday, I looked for documentation for Bootstrap but that wasn't necessary.  The documentation was on the [site](http://twitter.github.io/bootstrap/) itself.  I was looking for a link that says "Documentation" but if you click on the links at the top (Get Started, Scaffolding, Base CSS, Components, Javascript, Customize), you get everything you need.  I read through the whole thing and now I'm ready to work on my site with a fair degree of confidence.  It makes it really convenient to start up any website.  The documentation was awesome.  It tells you everything you need without any fluff.\r\n\r\nPlaying around with Bootstrap, I had to install LiveReload so I can see the changes right away.  I have guard running to keep things up to date.  \r\n\r\nI decided to try to use vim exclusively for a week.  I learned how to use multiple cursors ([vim-multiple-cursors](https://github.com/terryma/vim-multiple-cursors) in vim.  The problem is that it doesn't create multiple cursors for the next line, which makes it difficult to column editting.  If you type `ctrl-n`, it will highlight the word, and subsequent `ctrl-n` will bring you to the next word creating a new cursor in the process.  I guess I'll have to look for another vim package to do column editting.\r\n\r\nI discovered Vim Adventure from the Python Meetup on Monday.  It's a web based game that helps you learn vim.  You move the character using the vim key strokes (`hjkl`) and learn new things as you progress through the game.  I haven't had time to play with it much.  I'll try to find some time to play with it this week.\r\n\r\nPlayed Dominion during lunch.  It's an interesting game.  I find it interesting that someone can make a card game and make it interesting.  The only card game I know of are ones played with regular playing cards like poker or blackjack.  In Dominion, you start off with ten coins and victory point cards.  You shuffle your deck and select five.  You buy cards that is in the common pool, such as other coins, victory points, or action cards.  The action cards allow you to do special things and the instructions are written on the card.  You win by collecting the most victory points.  The victory points are useless during play because they don't actually do anything so it just take up space in your hand.  The game ends when the 6-point victory card pile is depleted or when the other three victor card piles are depleted.\r\n\r\nDuring the day, I had some thoughts about my tic-tac-toe program.  I figured that my symmetry lookup, that is looking for symmetrical patterns of the current board, is taking too long so I came up with an idea.  Instead of keeping track of the current board and calculating the symmetrical positions to look up, I store eight copies of the current board in different symmetrical states because updating a board is a lot quicker than creating a new board each time.\r\n\r\nI'm reading "Ruby on Rails 3 Tutorial".  Even though I know a lot of the material, there is still a lot of new information, much of it ancillary to Ruby on Rails itself.  I'm about a quarter of the way through.  I'm going to see if I can finish this by tomorrow.  I want to get started on the next phase of my learning, which is to learn objective-c and Mac OS X programming.	2013-05-01 14:36:53.143353	2013-05-01 14:36:53.143353	2013-05-01 09:55:00
10	Tic Tac Toe bugs and RSpec during memoized position optimization	I discovered a bug in my Tic Tac Toe program that was not detected by the RSpec.  I'm trying to wrap my head around this problem because I wonder if I did anything wrong when I was developing my RSpec.  The bug happens when I am playing a game where I let the computer win.  On the turn where the computer should pick out the winning move, it misses it completely.  I'm not sure when it was introduced but I suspect that it was when I added the evaluate-on-move optimization.\r\n\r\nI had just finished my memoized position optimization where the program remembers the evaluation of each positions so it doesn't have to recalculate it if it encounters it again.  Initially I thought the bug was introduced during this optimization, but I went back to my previously committed code, the evaluate-on-move optimization, and saw that it was happening there too.  I remember when I was initially writing my code before any optimization,  I was able to let the computer win.  I look at my test suite and saw that I do not have a test that allows the computer to win.  The main reason for this was because my understanding of RSpec was not good enough to implement the test the way I wanted to.  I googled around a bit and I think I have enough info to implement it.  There will be another blog entry when I have this all figured out.	2013-04-26 14:42:14.572484	2013-06-11 20:20:25.909476	2013-04-26 10:24:00
20	Vim Fluency, Tmux Panes and iTerm	Learned some more vim and tmux over the weekend.\r\n\r\n## Vim\r\n\r\n* Learned about folding in vim -- `zf<motion>` to fold, `zo` to open a fold.  `:help folding` will give more info. \r\n* `:NERDtree` allows me to navigate much easier.  \r\n* ControlP bound to `ctrl-p` allows me to use Textmate style file find.  \r\n* Since I have `set mouse=a` in my `.vimrc`, copy and paste to the system clipboard no longer works the same.  I can select with my mouse while holding down the `opt` button and that will bring my regular copy back.  However, this is not as useful since I have numbers in the gutter.  Instead, I have `ctrl-c` bound to `:w !pbcopy<Cr><Cr>`.\r\n\r\nI'm able to use vim more fluently now. \r\n\r\n## iTerm\r\n\r\nI turned off iTerm Preference *General* > *Window* > *Use Lion-style Fullscreen windows* because there is a delay due to the swiping animation when it has to switch desktop spaces.  With it turned off, it's real zippy.\r\n\r\n## tmux\r\n\r\nLearned that you can detach a pane via `<prefix> !` (prefix is `ctrl-b` but I bound it to `ctrl-a` because I find the screen binding more convenient -- ie closer).  The following is my `~/.tmux.conf`.\r\n\r\n```bash\r\n# Set screen-like shortcuts  (also to avoid Ctrl-b for vi users)\r\nset -g mouse-resize-pane on\r\nset -g mouse-select-pane on\r\nset -g mode-mouse on\r\nunbind C-b\r\nset -g prefix C-a\r\nunbind ^a\r\nbind-key ^a  last-window            # C-a C-a: quick switch to last-viewed window\r\nbind-key ^i  select-pane -t :.+     # C-a C-i: cycle between panes in window\r\nbind-key A   command-prompt "rename-window '%%'"\r\nbind-key '"' choose-window\r\nbind-key k   confirm-before -p "kill-pane #W? (y/n)" kill-pane\r\nbind-key K   confirm-before -p "kill-window #W? (y/n)" kill-window\r\nbind-key S   split-window\r\nbind-key a   send-key 'C-a'\r\n```\r\n\r\nThe first three lines allow my mouse and tmux to interact as you'd expect from a GUI interface.  The rest is just rebinding to be more like the unix `screen` command -- something I'm more familiar with.	2013-05-06 14:44:53.55852	2013-05-06 14:45:17.146946	2013-05-06 17:44:33
19	Object Scope Bindings	Some time ago, I saw a ruby code that looked something like\r\n\r\n```ruby\r\nobj.some_method do\r\n  foo "something"\r\nend\r\n```\r\n\r\nwhere foo was some method of `obj`.  I could see that inside of the block the scoping rules were respect to the `obj`.  I wondered for a long time how this was done so I decided to figure it out.  It turns out that it's just a simple use of `instance_eval`.  You can implement it as such:\r\n\r\n```ruby\r\nclass A\r\n  def foo arg\r\n    puts arg\r\n  end\r\n  \r\n  def some_method &block\r\n    instance_eval(&block)\r\n  end\r\nend\r\n\r\nobj = A.new\r\nobj.some_method do\r\n  foo "something"\r\nend\r\n\r\n#=> "something"\r\n```\r\n\r\nYou can see something like this from RSpec or rake.	2013-05-06 03:42:10.602838	2013-05-07 14:01:49.898843	2013-05-06 07:59:59
21	Homebrew And MySQL	I've been using MacPorts and I needed to install clojure.  The one on MacPorts is old and Gavin Stark told me I should use Homebrew and get rid of MacPorts because it's not up to date on a lot of stuff and suggested I start with a pristine `/usr/local` directory.  So I blew away my MacPorts directory `/opt` and `/usr/local` and used installed `mysql` and `postgresql`.  The only tricky part was that my MySQL Preference Pane is expecting to see `/usr/local/mysql`.  I just symlinked that to current version of mysql\r\n\r\n```bash\r\nsudo ln -s /usr/local/Cellar/mysql/5.6.10 /usr/local/mysql\r\n```\r\n\r\nand everything is back to normal.  This may be a problem if I upgrade in the future.  I may fix this by removing the symlink and make it into a real directory and symlinking the individual bin commands from `/usr/local/mysql/bin` to `/usr/local/mysql/bin`\r\n	2013-05-08 14:39:56.880782	2013-05-08 14:39:56.880782	2013-05-08 18:11:42
22	Learning Clojure	Been learning clojure mainly through reading "Programming Clojure" by Halloway and Bedra from Pragmatic Programers.  I've been playing around with the REPL (Read Eval Print Loop).  At first I was using `clj` but `lein repl` is way better because it allows you to use up/down-arrows to cycle through commands, tab completions, and be able edit your line.\r\n\r\nI found a great [cheat sheet](http://clojure.org/cheatsheet).  I just need to gather a large enough set of useful commands and I can start coding.  I probably need a debugger.	2013-05-08 14:46:17.044279	2013-05-08 14:46:17.044279	2013-05-08 18:40:04
18	HR Stuff and Blog UI Updates	Spent most of the day getting my paperwork done for 8th Light.  I will be starting as a resident apprentice on Monday 5/6.\r\n\r\nI went home and slept until 11pm.  When I awoke, I decided I was going to work on the Blog's UI a bit.\r\n\r\nData Migration\r\n--------------\r\nI created a new field called `published_at` that combined what `date` and `time` did.  The difficult part was that I also wanted to combine the data.  I know how to do it in SQL, but I wanted to find a Rails way.  Here's the final result:\r\n\r\n```ruby\r\nclass CreatePublishAt < ActiveRecord::Migration\r\n  def up\r\n    add_column :blog_entries, :published_at, :datetime\r\n    BlogEntry.update_all "published_at = date + time"\r\n    remove_column :blog_entries, :date\r\n    remove_column :blog_entries, :time\r\n  end\r\n\r\n  def down\r\n    add_column :blog_entries, :time, :time\r\n    add_column :blog_entries, :date, :date\r\n    BlogEntries.update_all "date = published_at::date, time = published_at::time"\r\n    remove_column :blog_entries, :published_at\r\n  end\r\nend\r\n```\r\n\r\n**NOTE**: `published_at::date` converts `published_at` to a `date` type, likewise for `::time`.\r\n\r\nThe alternative way to update `published_at` was to do something like this.\r\n\r\n```ruby\r\n# don't do this\r\nBlogEntry.all.each do |entry|\r\n  entry.published_at = DateTime.new(entry.date.year, entry.date.month, entry.date, day, entry.time.hour, entry.time.min, entry.time.sec)\r\nend\r\n```\r\n\r\nIt's a bad habit to iterate through each object because this would generate a sql command for each row.  By using `update_all`, there is one sql command so this would scale for large datasets.\r\n\r\nAce Editor\r\n---------\r\nI've been annoyed by the 80 column print margin that shows up on the editor when entering a new blog entry.  After a lot of googling and trial and error, I came upon this winning workflow.\r\n\r\n1. In Chrome, go to the webpage that contains the editor.\r\n2. Open up Javascript Console by `cmd-opt-J`\r\n3. type `editor.set`\r\n\r\nYou should see that the console will try to complete the method.  If you scroll through, you'll see something promising `setShowPrintMargin`.  So if you call \r\n\r\n```js\r\n> editor.setShowPrintMargin(false);\r\n```\r\n\r\nyou'll see the print margin disappear.\r\n\r\nDatepicker\r\n----------\r\nI went to the [JQueryUI website](http://jqueryui.com/) and added the CDN (Content Delivery Network) to the header.  You can find the links at the bottom of the page.  CDN are links that host the resource (Javascript or CSS) so you don't have to have your own copy on your site.  It can make your site faster because since it's a central resource, it can be cached across multiple websites that use the CDN links.\r\n\r\nI added a little javascript to get it working.\r\n\r\n```html\r\n  <script>\r\n    $(function() {\r\n      $("#blog_entry_published_date").datepicker({ dateFormat: "yy-mm-dd"});\r\n    });\r\n  </script>\r\n```\r\n\r\nI ran into a problem in the beginning because the example code on JQueryUI used this format: `datepicker("option", "dateFormat", "yy-mm-dd")` but I wasn't able to get it to work.	2013-05-03 15:15:36.397242	2013-05-03 15:48:10.898686	2013-05-03 19:16:40
28	On To Clojure Tic-Tac-Toe	I've started writing my Clojure version of Tic-Tac-Toe.  I was trying to get fireplace.vim working but it'll have to wait.  I started writing simple tests and I'm working on a good way to modify state.  I could use `ref` but then I have to wrap a bunch of code in `dosync`.  I might use `atom` and `swap!`.  Once I figure this out, the rest of the code should write itself.\r\n\r\nMy second priority is to read through all of `user_*.txt` docs from vim.  Eventually learning vimscript so I can see what the plugins are doing so I don't have to google around for hours.	2013-05-16 15:07:27.050517	2013-05-16 15:07:27.050517	2013-05-16 18:57:20
23	Clojure's lazy-seq	I'm reading through Programming Clojure and was struck by one of their examples on lazy-seq.  They didn't go into detail because they will be going more in detail on lazy evaluation on a future chapter.  The started to analyze the code:\r\n\r\n```clj\r\n(def primes\r\n  (concat\r\n   [2 3 5 7]\r\n   (lazy-seq\r\n    (let [primes-from\r\n          (fn primes-from [n [f & r]]\r\n            (if (some #(zero? (rem n %))\r\n                      (take-while #(<= (* % %) n) primes))\r\n              (recur (+ n f) r)\r\n              (lazy-seq (cons n (primes-from (+ n f) r)))))\r\n          wheel (cycle [2 4 2 4 6 2 6 4 2 4 6 6 2 6  4  2\r\n                        6 4 6 8 4 2 4 2 4 8 6 4 6 2  4  6\r\n                        2 6 6 4 2 4 6 2 6 4 2 4 2 10 2 10])]\r\n      (primes-from 11 wheel)))))\r\n```\r\n\r\nA few things of note:\r\n\r\n* This is not a function definition.  This is binding `primes` to a list which is lazy evaluated.\r\n* The function `primes-from` is named twice.  Once for the `let` to get local scoping and as the name argument for `fn` so that this function has a name.  The name is required in this case because it is called recursively.\r\n* The `if` condition checks to see if _n_ is divisible by any of the previous subset of primes.  It is not necessary to check the complete previously generated primes because mathematically only numbers \\\\( \\sqrt{n} \\\\) is a possible divisors of \\\\(n\\\\).\r\n* In `take-while` in the `if` conditional, it is necessary to find a value to test that is included in the previous cached values of `primes`.  For instance, if you had\r\n\r\n```clj\r\n(take-while #(< % n) primes)\r\n```\r\n\r\nThis would never end (infinite recursion) because let's say _n_ = 8. `primes` would return `[2 3 5 7]`, which are all less than 8 so it will try to fetch the next prime number from `primes`, which is exactly what it was trying to do in the first place.  Thus it gets caught in an infinite recursion.  You need the test to have a failure point (ie where it evaluates to false) within the precomputed list.  So in the original code `(take-while #(< (* % %) n) primes`,  3 does the trick since `(< 9 n)` (_n_=8 in this case) stops the `take-while` from continuing.\r\n\r\n* `(recur (+ n f) r)` is allowed to be used instead of a normal recursive call because it is the last line of executable code of the function `primes-from`.  `recur` works just like a recursive call without building a new stack -- for efficiency.\r\n* The `recur` in the `if` clause don't have `lazy-seq`because we haven't found a prime and we want it to keep searching.\r\n* The else clause needs a `lazy-seq` because it found the next prime and wants to have that value available and we do not want to have the recursive call to `prime-from` executed here but at the time when it gets evaluated.  In effect it is putting a marker here to say what it needs to execute when it the evaluator sees it.\r\n* The recursive call in the else clause cannot use `recur` because there is code that needs to be executed after `prime-from` returns with it's value.\r\n* The following code could be written another way from\r\n\r\n```clj\r\n(lazy-seq (cons n (primes-from (+ n f) r)))\r\n```\r\n\r\nto \r\n\r\n```clj\r\n(cons n (lazy-seq (primes-from (+ n f) r)))\r\n```\r\n\r\n* Seems like `lazy-seq` needs to have a recursive call in the body otherwise it throws an exception.\r\n* The `wheel` is just a set of increments used to find the next number to test for a prime.  Since we know that 2, 3, 5, 7 are prime, we can skip multiples of these.  Once you get the list of offsets, they cycle.	2013-05-10 15:47:30.465125	2013-05-10 17:32:35.057296	2013-05-10 18:28:49
24	Clojure in Emacs	It was quite confusing to set up clojure for emacs.  Setting up clojure-mode itself was quite easy.  Assuming you have the latest emacs with package manager, you can look for clojure-mode.  Make sure the package manager is set up by putting this in your `.emacs` or `.emacs.d/init.el` file.\r\n\r\n```cl\r\n(require 'package)\r\n(add-to-list 'package-archives\r\n             '("marmalade" . "http://marmalade-repo.org/packages/") t)\r\n(package-initialize)\r\n```\r\n\r\nThen do\r\n\r\n* `M-x package-list-packages`\r\n* Choose `clojure-mode` by typing `i` when you're on that line\r\n* Type `x` to execute the install\r\n \r\nYou should now have clojure mode.  You can test this out by opening a `.clj` file and see that it says it's in clojure-mode.\r\n\r\nNow I want to connect this to a REPL.  If you google search for this, you'll see mentions of swank and SLIME.  If you go to the [github page](https://github.com/technomancy/swank-clojure), you'll see it mention that the project has been deprecated.  It is now replaced by [nREPL](https://github.com/kingtim/nrepl.el).\r\n\r\nInstall nREPL by going through the package manager and choose `nrepl` (yes, you could've done this at the same time you installed clojure-mode).\r\n	2013-05-15 18:46:07.067763	2013-05-15 19:17:24.093738	2013-05-15 22:34:02
29	Macbook Pro Hangs On Startup -- Fixed	Today, I was using my laptop as normal.  I closed the laptop and went home.  When I opened my laptop, I noticed my machine was completely stalled.  Computer gave no response when I tried to do anything (pressing keys, moving mouse).  I turned it off and restarted it.  I hear the bell when the laptop starts up, then it completely freezes again showing only the gray background and an apple logo.  No spinner, no mouse, not responsive.\r\n\r\nThe fix takes about two hours.  Follow these steps: (Note: You may need to be connected to the internet.  I was connected via ethernet cable when I did this.  )\r\n\r\n1. Turn off the laptop.\r\n2. Turn on the laptop and wait for the tone the laptop makes when it starts up.\r\n3. Immediately press `command-R`. The laptop will boot up in Recovery Mode.\r\n4. When it prompts you with a menu, choose to re-install the operating system.\r\n5. You wait.  The laptop will take about two hours to re-install the OS.  It will reboot itself (perhaps twice).  When it is all done, you will see a login prompt.\r\n6. You'll need to reinstall Xcode command tools.  Open Xcode\r\n7. Go to the menu item *Xcode* > *Open Developer Tools* > *More Developer Tools...*\r\n8. This will open up a webpage.  Download the Command Line Tools\r\n9. Open the dmg file and install.\r\n\r\nAt this point, your OS has been fixed... at least for now.  We haven't actually fixed the original problem so it may happen again, but probably not for a long time.  This problem happened to me twice in 6 months on my Macbook Pro Retina 15".\r\n	2013-05-17 04:25:14.470463	2013-05-17 04:51:12.742618	2013-05-17 08:24:38
30	Blog Update	I pushed out two changes to my blog site.  It now handles exceptions if you have a bad fenced block code.  For example if I tag a snippet of code to be ````lisp`, it will break since it doesn't know about lisp.  Previously, the site would just show an ugly error page.  Now it will put "block cannot be interpreted" as the text inside the fenced block code.\r\n\r\nThe second change was I added pagination.  The problem was that I had too many entries and it took a long time before I get a response if I hit the first time in the morning.  I limited the entries to 5 per page.  Now things are as zippy as before.	2013-05-17 20:35:14.41075	2013-05-17 20:35:14.41075	2013-05-18 00:29:19
34	Programming Clojure and Software Craftsmanship	I finished reading Programming Clojure by Stuart Halloway.  It's probably not the best book to learn Clojure if you're just starting out.  It's probably a good book if you already have some knowledge and you want to go a bit deeper.  The examples in the book is not as simple as it should be, although they are good programs to ponder if you have some idea of how Clojure works.\r\n\r\nI'm reading Software Craftsmanship by Pete McBreen.  I only got into a couple of chapters and it's good to read about the history of how software engineering came to be and how it is inappropriate for today's development environment.  I'm reading through it and nodding along.  I suppose things have changed in the programming world that most of the stuff mentioned in the book seem obvious.\r\n\r\nMy plan is to read the book and get ready for my next project.  I will need to integrate ruby and clojure and make a Rails app of the Tic Tac Toe program.	2013-05-22 14:26:25.339735	2013-05-22 14:26:25.339735	2013-05-22 18:15:59
31	Fireplace and Vim update	I finally figured out what was wrong with my fireplace setup.  Fireplace is a vim plugin that allows you to interact with the Clojure REPL.  My problem was that I need to put a namespace at the top, so if had a file foo.clj, I need to put `(ns tic-tac-toe.foo)` (tic-tac-toe is the app I'm working on).  Everything is working as advertized.\r\n\r\nNow I just need to figure out how I want to have my setup so I can be most efficient.	2013-05-17 20:41:03.708526	2013-05-20 14:20:20.815654	2013-05-18 00:35:58
32	Transposing in Clojure	Let's say you have `[[0 1 2] [3 4 5] [6 7 8]]` and you want to transpose that to `[[0 3 5] [1 4 7] [2 5 8]]`.  There is a simple idiom that takes care of that.\r\n\r\n```clj\r\n(apply mapv vector [[0 1 2] [3 4 5] [6 7 8]])\r\n```\r\n\r\nLet's break this down.  Our end goal is to get something like\r\n\r\n```clj\r\n(vector\r\n  (vector 0 3 6)\r\n  (vector 1 4 7)\r\n  (vector 2 5 8))\r\n```\r\n\r\nYou can get this by grouping each of the columns into a vector and mapping over them\r\n\r\n```clj\r\n(mapv vector [0 1 2] [3 4 5] [6 7 8])\r\n```\r\n\r\nThe only problem is that our input is a vector of vectors.  Using `apply`, it will splat the vector (i.e. embed, or flatten, them into the call), so you end up with the three vectors.\r\n	2013-05-20 14:33:14.553333	2013-05-20 14:33:14.553333	2013-05-20 18:22:48
33	Clojure Tic-Tac-Toe	I finally completed my tic-tac-toe program in Clojure.  I learned enough about Clojure to be comfortable with it the next time I need to write something.  I also have a good development environment in vim.  That is probably more important since you really need to be fluent in your environment to be able to focus on learning the language.\r\n\r\nI learned a new trick in vim paredit mode.  If I want to auto-indent an sexp, I normally have to do `Jr<Cr>` (i.e. join the line, replace the space delimiter with a carriage return so vim can do the auto-indent).  But that means I have to do it for each line, which gets tedious really fast.  The new way is to wrap the expression in parenthesis and then promote the inner sexp and voila!  The sexp is auto-indented.  Instructions:\r\n\r\n1. Go to the beginning of the sexp in normal mode.\r\n2. `,W`.  This will wrap it in parentheses\r\n3. Go to the beginning of the inner sexp.\r\n4. `,I`.  This will promote it, i.e. remove the outer parentheses (the one you had just added).\r\n \r\nHere's a list of Clojure functions I found useful:\r\n\r\n```clj\r\n(keep-indexed #(vector %1 %2) '(a b c)) ; => ([0 a] [1 b] [2 c])\r\n\r\n(some #{1 2} '(1 2 3))  ; => 1\r\n(some #{1 2} '(0 3 4))  ; => nil\r\n\r\n(apply mapv vector '[[0 1] [2 3]]) ; => [[0 2] [1 3]]\r\n\r\n(when (= 1 1) (+ 1 2))  ; same as (if (= 1 1) (+ 1 2) nil)\r\n\r\n(read-line) ; reads a line from stdin\r\n\r\n(flush) ; flushes stdout buffer\r\n\r\n; tries to convert "123", throws exception on parsing error\r\n; catch will handle the exception.\r\n(try\r\n  (Integer. "123")\r\n  (catch NumberFormatException e\r\n    false)) \r\n\r\n; you can throw an exception and catch it somewhere in you call heirarchy\r\n(throw (Throwable. "my message")) \r\n```	2013-05-21 14:59:10.222269	2013-05-21 14:59:10.222269	2013-05-21 18:28:45
36	Indenting in Vim	Just discovered that `=` in vim's normal mode is to indent properly.  In insert mode you can do do `ctrl-f`.\r\n\r\nThis comes in handy if you're doing clojure.  Just go the the beginning of the sexp (usually the parenthesis) and do `=%` and it will auto-indent that whole expression.  `==` will just do the current line.	2013-05-23 17:39:57.294254	2013-05-23 17:39:57.294254	2013-05-23 21:37:04
37	Finished Software Craftsmanship	I finished the Software Craftsmanship book.  The main points of the book was that software engineering came from building huge massive projects like the space shuttle where hundreds of man years are required to write code for hardware that doesn't exist yet.  Because the hardware doesn't exist, you needed to spec out the programs after you analyzed it.  Coding was the easy part because everything has been figured out.  The waterfall model goes top down.  You gather the requirements, design, implement, verify and then maintain.\r\n\r\nThe problem is that this is inappropriate for our present development environment.  It's too slow and doesn't handle changes in requirements. You need feedback from your users and use that info to drive the specs. You do this by making incremental changes to the code.  If you wait until you're "done", you run the risk of creating something that the client does not want, or worse a collection of bugs.\r\n\r\nInstead of the programmers just implementing a design, they need to have a larger scope of the entire process.  In software engineering, the main focus was on the process and engineers are interchangeable.  Software craftsmanship says that individual programmers matter.  Great programmers can make a dramatic impact to a project.  You can develop great programmers through apprenticeship.  You need to have that knowledge passed off to the next group of developers.  In software engineering, the great programmers were usually promoted to managers and had little to do with programming.\r\n\r\nPretty much the book was preaching to the choir since I agreed with everything it was saying.  What programmer wouldn't agree that great programmers need to be paid more and average programmers less.  Unless of course, you're an average programmer.	2013-05-24 15:21:36.119036	2013-05-24 15:21:36.119036	2013-05-24 18:10:39
38	TDD in Clojure Using Midje	I just discovered midje, a testing library for clojure.  Clojure already comes with `clojure.test` and it looks something like this:\r\n\r\n```clj\r\n(ns tic-tac-toe.core-test\r\n  (:require [clojure.test :refer :all]\r\n            [tic-tac-toe.core :refer :all]))\r\n\r\n(deftest init-position-test\r\n  (let [position (init-position)\r\n        ply (:ply position)]\r\n    (testing "initialize a board."\r\n      (is (= (:board position) '[- - -, - - -, - - -])))\r\n    (testing "make sure it is x's turn"\r\n      (is (= (:turn position) 'x)))))\r\n```\r\n\r\nAn error looks like this\r\n\r\n```bash\r\neuler:tic-tac-toe.clj ckim$ lein test\r\n\r\nlein test tic-tac-toe.core-test\r\n\r\nlein test :only tic-tac-toe.core-test/position-string-test\r\n\r\nFAIL in (position-string-test) (core_test.clj:15)\r\ndisplay of position\r\nexpected: (= (position-str (init-position)) "   |   |   \\n-----------\\n   |   |   \\n-----------\\n   |   |   ")\r\n  actual: (not (= " 0 | 1 | 2 \\n-----------\\n 3 | 4 | 5 \\n-----------\\n 6 | 7 | 8 " "   |   |   \\n-----------\\n   |   |   \\n-----------\\n   |   |   "))\r\n\r\nRan 8 tests containing 22 assertions.\r\n1 failures, 0 errors.\r\nTests failed.\r\n```\r\n\r\nIf you fix the problem it, will look like this:\r\n\r\n```bash\r\neuler:tic-tac-toe.clj ckim$ lein test\r\n\r\nlein test tic-tac-toe.core-test\r\n\r\nRan 8 tests containing 22 assertions.\r\n0 failures, 0 errors.\r\n```\r\n\r\nWith midje, it looks like\r\n\r\n```clj\r\n(ns ttt.midje\r\n  (:use [midje.sweet]))\r\n\r\n(fact (+ 2 2) => 5)\r\n(fact (+ 2 2) => odd?)\r\n```\r\n\r\nError output looks like\r\n\r\n```bash\r\neuler:ttt ckim$ lein midje\r\n\r\nFAIL at (midje.clj:4)\r\n    Expected: 5\r\n      Actual: 4\r\n\r\nFAIL at (midje.clj:5)\r\nActual result did not agree with the checking function.\r\n        Actual result: 4\r\n    Checking function: odd?\r\n```\r\n\r\nIf you correct it, it looks like\r\n\r\n```bash\r\neuler:ttt ckim$ lein midje\r\nAll checks (2) succeeded.\r\n```\r\n\r\nTo get midje set up, you need to add this to `~/.lein/profiles.clj`\r\n\r\n```clj\r\n{:user {:plugins [[lein-midje "3.0.0"]]}}\r\n```\r\n\r\nAdd this to `project.clj` in your project root directory\r\n\r\n```clj\r\n  :profiles  {:dev  {:dependencies  [[midje "1.5.0"]]}}\r\n```\r\n\r\nThen you run the following to fetch the necessary files.\r\n\r\n```bash\r\n$ lein deps\r\n```\r\n\r\nOnce you have it set up, you can modify the file located in `test/<app>/midje.clj` directory (`test/ttt/midje.clj`).\r\n\r\nTo get stubbing, you pass `(provided <function-call> => <result>)`.  For example, assume `foo` calls `bar`, you can define:\r\n\r\n```clj\r\n(fact\r\n  (foo) => 'hello\r\n  (provided (bar) => 'hello))\r\n\r\n```	2013-05-24 17:46:40.514725	2013-05-24 17:47:52.360615	2013-05-24 19:21:44
39	Capybara-webkit Is Broken for JRuby	I've been having a hard time trying to get `capybara-webkit` (version 1.0.0) working on my rails app using cucumber using JRuby.  When I run `cucumber`, I see this error\r\n\r\n```bash\r\n  @javascript\r\n  Scenario:\r\n    Given I visit the home page\r\n      undefined method `[]' for nil:NilClass (NoMethodError)\r\n      ./features/step_definitions/ttt_steps.rb:2:in `/^I visit the home page$/'\r\n      features/ttt.feature:5:in `Given I visit the home page'\r\n    Then I should have selector "#ttt"\r\n    And I should see content "Who do you want to play first"\r\n```\r\n\r\nI suspected it might have something to do with the jruby version, so I created a new Rails app using the MRI ruby and it worked perfectly.  I also tried using RSpec instead of Cucumber, and it had the same problem.\r\n\r\nSince I can't rely on capybara-webkit on jruby, I'll have to look into selenium to test the javascript.\r\n\r\nJRuby is nowhere close to the maturity of MRI Ruby.  The usual gems like `debugger` or `looksee` is not able to be installed.  My experience with `capybara-webkit` showed me that even if I managed to get it to install, there is no guarantee that it would work.  It's tempting to scrap JRuby and go back to MRI, but I'm not sure how I would handle Clojure.  I could make the Clojure code run as a server but I think that defeats the learning experience of trying to get it integrated.	2013-05-26 20:45:12.124688	2013-05-26 20:58:24.646538	2013-05-27 00:37:01
40	Poltergeist For Rails Javascript testing	Since `capybara-webkit` is broken for JRuby. I installed the `poltergeist` gem.  It uses PhantomJS so I needed to install that too.\r\n\r\n```bash\r\n$ brew install phantomjs\r\n```\r\n\r\nI modified my `features/support/env.rb` file by adding the following at the end.\r\n\r\n```ruby\r\nrequire 'capybara/poltergeist'\r\nCapybara.javascript_driver = :poltergeist\r\n```\r\n\r\nWooHoo!  It works.  Now I can work on the Tic Tac Toe program again.	2013-05-26 21:22:22.343157	2013-05-26 21:22:22.343157	2013-05-27 01:18:28
41	Yahoo! Email Unmerged Finally	I had a problem with my yahoo account for years.  When I signed up for SBC Global Internet service from ATT, I merged my free account (chongkim@yahoo.com), which I had for years, with ATT's account.  It was all well and good until I stopped using ATT.  I was still able to use my free yahoo account but I was not able to modify my password because it's still linked to my ATT account.  I wasn't able to go to my ATT account because I don't have service with them any more.\r\n\r\nFor years, I was stuck in this limbo.  I googled my problem and saw that other people had the same problem with no solution.  A couple of weeks ago, my account was hacked and someone sent spam to everyone on my contact list.  Bummer.  I can't even change my password, so I just removed everyone on my contact list.\r\n\r\nA miracle happened today.  ATT suspended my yahoo account due to inactivity, and there on the webpage was the button I've been waiting for all this time.  "Unmerge".  I unmerged my free account from ATT and now I'm able to change the password.  I'm free!!!	2013-05-28 15:10:15.71661	2013-05-28 15:10:15.71661	2013-05-28 18:59:49
45	Book Review: Ruby On Rails 3 Tutorial by Michael Hartl	This book is great for beginners starting out on Rails programming.  It shows you how to develop using TDD, use version control with Git and pushing the code out to Heroku.  It doesn't go into detail in any of those, but gives you enough to use it on simple applications.\r\n\r\nI already had experience with Rails 2 so I was expecting to plod along in this book to find all the new features.  Instead, it took me on a tour of using RSpec,  Git, Spork, Factory Girl, the Ruby language.  I knew some of them and it was great to discover new gems as they were being used.  This way you get to see how useful a gem like Spork or Factory Girl can be.  The book is well rounded and any beginner who picks up this book would get a good foundation in Rails.\r\n\r\nIt's hard not to put this book down and start coding.  You want to try it out and see for yourself.  I think this is the reason why it took me longer to read this book than I expected.  After I was done, I scanned through the book from the beginning, and I was able to pick up things I had glossed over.  I'm tempted to re-read this book.	2013-06-01 21:41:51.082471	2013-06-02 21:30:57.94903	2013-06-02 01:30:25
43	An Elegant Negamax With Alpha-Beta Pruning in Clojure	I've been reading up on [Negamax with Alpha-Beta Pruning](http://en.wikipedia.org/wiki/Negamax) and I need to write the following pseudocode in Clojure.\r\n\r\n```js\r\nfunction negamax(node, depth, alpha, beta, color)\r\n    if node is a terminal node or depth = 0\r\n        return color * the heuristic value of node\r\n    else\r\n        foreach child of node\r\n            val := -negamax(child, depth - 1, -beta, -alpha, -color)\r\n            if val >= beta\r\n                return val\r\n            if val > alpha\r\n                alpha := val\r\n        return alpha\r\n```\r\n\r\nAt first I was struggling because I needed to figure out a way to modify a variable and then break a loop.  The code was starting to get ugly and I knew I was on the wrong course.  I realized I need to write it the way someone who knows clojure would code it.  I thought, "What function has short circuiting?" and I came up with `take-while`.  That returns a list, but the pseudocode was just returning a number.  I started thinking about what the assignment was doing and realized that it was just an artifact of the imperative language as it was trying to find the max value of it's children.  This meant that once I have the list, I just need to find the max and I'm done.  The resulting clojure code looks like this.\r\n\r\n```clj\r\n(defn negamax [node alpha beta color]\r\n  (let [node-value (evaluate-leaf node)]\r\n    (if node-value\r\n      (* color node-value)\r\n      (->> node\r\n           (find-children)\r\n           (map #(- (negamax % (- beta) (- alpha) (- color))))\r\n           (take-while #(< % beta))\r\n           (cons alpha)\r\n           (apply max)))))\r\n```\r\n\r\nLet's step through the code.\r\n\r\n`evaluate-leaf` returns a value for the current node.  If there is a `node-value`, that means it's a leaf-node (or terminal node if you use the terminology of the pseudocode) and we can return a value.\r\n\r\nIn the else clause\r\n\r\n* We start with the current node,\r\n* then we get all its children ending up with a list of child nodes.\r\n* We map the negamax function on each of the child nodes in the list.  At this point you may ask, "Doesn't this defeat the purpose of alpha-beta pruning because you're not cutting off the calculation when you find it necessary?".  The answer is that `map` returns a lazy sequence, so the elements are not executing the recursion yet.\r\n* The `take-while` will fetch each element as long as the condition holds.  This is when the lazy sequence is realized (i.e. actually gets executed).  When this is done, you'll end up with a list of values.\r\n* `(cons alpha)` adds the alpha value that was passed in because in the pseudocode, we needed to have an initial value when calculating the max.\r\n* We `apply` the `max` function on this list and we're done.\r\n\r\n**Note** The return value needs to have the sign set by the color in the initial call, i.e.\r\n\r\n```clj\r\n(* color (negamax node alpha beta color))\r\n```\r\n\r\n**Note** The flaw in this code is that it is not updating the alpha after checking each child.  It does get set when the cousins are calculated.  This means I will need to write a new function that combins the `map` and `take-while`.\r\n\r\nJust for the record, the clojure code ended up being one line less than the pseudocode.\r\n\r\nAs a side note, we see `->>`.  That is just a macro to reduce embedded parentheses.  For example, these two statements are identical.\r\n\r\n```clj\r\n(->> x (foo 1 2) (bar 3 4))\r\n\r\n(bar 3 4 (foo 1 2 x))\r\n```\r\n\r\nThere is also `->` that works the same way but puts the previous form at the beginning instead of the end of the argument list.  So in this case, these two statements are equivalent.\r\n\r\n```clj\r\n(-> x (foo 1 2) (bar 3 4))\r\n\r\n(bar (foo x 1 2) 3 4)\r\n```\r\n\r\nBack to the code.\r\n	2013-05-29 05:33:54.900599	2013-05-29 14:47:57.429839	2013-05-29 08:59:13
42	Dynamic Binding in Clojure	Clojure has a `binding` method that allows you to stub out a method.  According to the `(cdoc binding)`, one example is:\r\n\r\n```clj\r\n(defn mymax [x y]\r\n  (min x y))\r\n\r\n(defn find-max [x y]\r\n  (max x y))\r\n\r\n(binding [max mymax]\r\n  (find-max 10 20))  ;; => 10\r\n```\r\n\r\nUnfortunately this doesn't work anymore.  When you run it, you'll get this error:\r\n\r\n```clj\r\nuser=> (binding [max mymax] (find-max 10 20))\r\nIllegalStateException Can't dynamically bind non-dynamic var: clojure.core/max  clojure.lang.Var.pushThreadBindings (Var.java:353)\r\n```\r\n\r\nThe only way to fix it is by defining the method as dynamic.\r\n\r\n```clj\r\n(defn ^:dynamic foo []\r\n  (println "hello"))\r\n```\r\n\r\nI'm able to do this for my own code, but I haven't figured out how to alter the meta data for an existing function, such as the `max` used in the example above. \r\n\r\n\r\n-----------\r\nComment: you can do this for existing functions using `with-redefs`	2013-05-29 00:26:30.534843	2013-05-29 19:27:58.305179	2013-05-28 23:21:13
44	Memoize In Clojure	Let's say you have a function that calls itself and repeatedly calculates previous results.  For instance,\r\n\r\n```clj\r\n(defn fib [n]\r\n  (println "fib" n)\r\n  (cond (= n 0) 1\r\n        (= n 1) 1\r\n        :else (+ (fib (- n 2)) (fib (- n 1)))))\r\n\r\n(fib 4)\r\n```\r\n\r\ngives this output.\r\n\r\n```\r\nfib 4\r\nfib 2\r\nfib 0\r\nfib 1\r\nfib 3\r\nfib 1\r\nfib 2\r\nfib 0\r\nfib 1\r\n```\r\n\r\nTo cache the results, you need to use clojure's `memoize` function.\r\n\r\n```clj\r\n(def fib (memoize (fn [n]\r\n                    (println "fib" n)\r\n                    (cond (= n 0) 1\r\n                          (= n 1) 1\r\n                          :else (+ (fib (- n 2)) (fib (- n 1)))))))\r\n\r\n(fib 4)\r\n```\r\n\r\nNow the output looks like this:\r\n\r\n```\r\nfib 4\r\nfib 2\r\nfib 0\r\nfib 1\r\nfib 3\r\n```\r\n\r\nIn the previous example, `fib 1` was called three times.  This example only executed it once and then cached the result so it didn't have to compute it again.	2013-05-29 23:06:42.907353	2013-05-29 23:06:42.907353	2013-05-30 00:29:32
46	Spork	**Problem** It takes a bit of time for my Rails tests to start, both RSpec and Cucumber.\r\n\r\n**Why** This is because it has to load Rails before it can start running the test.\r\n\r\n**Consequences**  This dramtically slows down my TDD because I have to wait a few seconds after modifying my code.  These seconds add up and it slows down my flow.\r\n\r\n**Solution**  There is a gem called Spork.  It runs as a DRb server where it keeps the Rails environment between tests so you don't have the startup cost.  Both RSpec and Cucumber has command line options for the DRb.\r\n\r\n**Installation**\r\n\r\nPut into your `Gemfile`.\r\n\r\n```ruby\r\ngem 'spork'\r\n```\r\n\r\nThen type this in your shell:\r\n\r\n```bash\r\n$ bundle install\r\n$ spork cucumber --bootstrap\r\n$ spork rspec --bootstrap\r\n```\r\n\r\nThis will modify `features/support/env.rb` for Cucumber and `spec/spec_helper.rb` for RSpec.  You just have to follow the instructions written in those files.  Basically put all the original code that was there into the `Spork.prefork` block.  This way it only gets executed once.  If things break (in my case, nothing broke), you may need to put some statements into the other block, `Spork.each_run`.\r\n\r\nRun spork.  You may want to run them in separate shells.\r\n\r\n```bash\r\n$ spork rspec\r\n$ spork cucumber\r\n```\r\n\r\n`spork rspec` will run on port 8989 and `spork cucumber` will run on port 8990.  You need to modify the config files for RSpec and Cucumber so they are aware of the spork server.\r\n\r\nFor Cucumber add `--drb --port=8990` to your `config/cucumber.yml` file.  For example, I put the arguments in the variable `std_opts`:\r\n\r\n```ruby\r\n<%\r\nrerun = File.file?('rerun.txt') ? IO.read('rerun.txt') : ""\r\nrerun_opts = rerun.to_s.strip.empty? ? "--format #{ENV['CUCUMBER_FORMAT'] || 'progress'} features" : "--format #{ENV['CUCUMBER_FORMAT'] || 'pretty'} #{rerun}"\r\nstd_opts = "--format #{ENV['CUCUMBER_FORMAT'] || 'pretty'} --drb --port=8990 --strict --tags ~@wip"\r\n%>\r\ndefault: <%= std_opts %> features\r\nwip: --tags @wip:3 --wip features\r\nrerun: <%= rerun_opts %> --format rerun --out rerun.txt --strict --tags ~@wip\r\n```\r\n\r\nFor RSpec a line `--drb` to you `.rspec` file.\r\n\r\nWhen you run `rspec`, it will automatically connect to the spork server and it should be a little faster.  It should work the same way with `cucumber`, but for some reason it is throwing an exception on `SystemExit`.  Other than that, it works fine.\r\n\r\nYou'll probably notice a big difference now if you use automated testing.  Using `guard` or `autotest`, you should see a significant difference in speed in your TDD.	2013-06-02 23:30:09.192359	2013-06-03 10:41:52.305629	2013-06-03 03:07:27
48	Spork Broken For Cucumber On JRuby	Spork was almost running on JRuby, but it's completely broken.  I ran my experiment where I created a new MRI rails application called `foo`.  I modified the gemfile to include\r\n\r\n```ruby \r\n group :test do\r\n  gem 'spork-rails'\r\n  gem 'cucumber', '1.2.5'\r\n  gem 'cucumber-rails', :require => false\r\n  gem 'guard'\r\n  gem 'guard-spork'\r\n  gem 'guard-cucumber'\r\n  gem 'database_cleaner'\r\nend\r\n```\r\n\r\nI run `bundle install`.\r\n\r\nI set up cucumber with `rails g cucumber:install`.\r\n\r\nI set up spork with `spork cucumber -b`.  I modify the `features/support/env.rb` file.\r\n\r\nI set up guard with:\r\n\r\n```bash\r\nguard init cucumber\r\nguard init spork\r\n```\r\n\r\nI edit the `Guardfile` so that cucumber runs with `:cli => '--drb'`.\r\n\r\nI create some dummy feature files and I run `guard`.  This works perfectly on MRI Ruby, but JRuby acts really flakey.  First thing you notice is the error message:\r\n\r\n<pre>\r\n16:02:45 - INFO - Running all features\r\nSocketError: bind: name or service not known\r\n        bind at org/jruby/ext/socket/RubyUDPSocket.java:160\r\n  initialize at /Users/ckim/.rvm/rubies/jruby-1.7.1/lib/ruby/1.9/rinda/ring.rb:35\r\n      (root) at ring_server.rb:7\r\n</pre>\r\n\r\nSecond thing you notice is that the color is gone *if* it runs your features.  Sometimes it decides not to run it.\r\n\r\nIf you run `cucumber` on the command line it complains that there is no DRb\r\n\r\n<pre>\r\neuler:jfoo ckim$ cucumber --drb\r\nUsing the default profile...\r\nfile:/Users/ckim/.rvm/rubies/jruby-1.7.1/lib/jruby.jar!/jruby/java/java_package_module_template.rb:11 warning: `eval' should not be aliased\r\nWARNING: No DRb server is running. Running features locally:\r\n</pre>\r\n\r\nBut you can see that it connected from looking at the spork output log.\r\n\r\nI did the same thing using MRI Ruby and everything worked.  No problems at all.  I'm beginning to hate JRuby even though there's nothing with with JRuby itself.  The gem support really sucks.\r\n\r\nI tested RSpec and that seems to work fine on JRuby so I'll need to convert my test over.	2013-06-05 20:12:13.366892	2013-06-05 20:42:04.654883	2013-06-05 23:52:15
51	Tic Tac Toe Kata in Ruby Using TDD	I've been practicing TicTacToe in Ruby using TDD for the past few days.  I finally got it down to under an hour (50 minutes actually).  I posted a video of me coding it and I sped up the video about 3x so it comes in a little over 14 minutes.\r\n\r\n<iframe width="560" height="315" src="http://www.youtube.com/embed/Y-rUmxnMBNk" frameborder="0" allowfullscreen></iframe>\r\n\r\nI started doing the TTT when I boarded the plane for my Chicago trip (Tues).  The flight lasted 2 hrs.  I managed to write a TTT game in 1 hr 50 minutes but didn't finish the user interface.  The next day (Wed), I wrote it again, it took about the same amount of time, but I was able to finish the interface.  On the flight back (Sat) I managed to do it in 1 hr 15 minutes.  Today (Sun) I got it down to 50 minutes.  I uploaded it to YouTube (my first video).  It's actually entertaining to watch it.\r\n\r\nI thought of adding audio, but the tests seem to explain what I'm doing pretty well.  The user can pause the video and figure it out themselves since the code is right there and each method is pretty short.\r\n\r\nI've put the source code on [Github](https://github.com/chongkim/ttt-ruby-tdd).	2013-06-16 14:03:55.367921	2013-06-17 18:06:27.428829	2013-06-16 17:31:09
50	CoffeeScript	I've always wanted to try CoffeeScript ever since I saw it on Railscast.  I finally got my chance.  Luckily it comes built-in for Rails 3, but I didn't know how it worked.  At first I thought I needed to compile and downloaded the coffee compiler.  It turned out to be useful to have.  Rails does not give good error messages if there is a problem in the coffee script, so I run it through the compiler and it'll give me a better idea of what's going on.\r\n\r\n**Installing CoffeeScript**.  CoffeeScript is a Node.js module.  Node.js is a javascript interpreter you can use outside of the browser.  To install using Homebrew use\r\n\r\n<pre>\r\n$ brew install node\r\n$ sudo npm install -g coffee-script\r\n</pre>\r\n\r\nand put this in your `~/.bashrc` file\r\n\r\n```bash\r\nPATH="/usr/local/share/npm/bin/:$PATH"\r\n```\r\n\r\nYou can use the `coffee` command to compile your coffeescript.\r\n\r\n**Don't neeed guard**.  I installed `guard-coffeescript` but I found I didn't need it.  You don't need to compile it because Rails will automatically do it for you using the asset pipeline.\r\n\r\n**The language**.  Coffeescript is somewhat like python in that indents matter. `if` `then` does not need an end.  You don't need curly braces or semicolons. Sometimes you don't need parentheses. Functions are defined using `->`.  So far these are simple translations that make your code smaller.  You get power when you find out about the `for` loop.  If you go to [the coffeescript website](http://coffeescript.org), they have a really great overview of the language with lots of examples.  You can even use the coffeescript interpreter directly from the browser.  I found that useful when I'm developing some tricky coffeescript.  You can immediately see any errors as you type then.\r\n\r\nIt's a bit frustrating when you make some modifications to your code and it either just doesn't work or you get an incomprehensible error.  You end up looking at the resulting javascript for clues.  The trouble is worth it because some of the powers of the `for` loop and parameter handling (you can have default args).\r\n\r\nAll in all, it's worth looking into.  Probably the best way to use it is by converting an existing javascript code and cleaning it up.	2013-06-11 10:36:33.322497	2013-06-12 12:16:56.188324	2013-06-11 13:02:23
52	TicTacToe Rails Mailer Bug	I had a bug in my TTT Rails app.  When I try to send out email, I get\r\n\r\n<pre>\r\nNameError: ActionMailer is not missing constant Base!\r\n  load_missing_constant at /Users/ckim/.rvm/gems/jruby-1.7.1/gems/activesupport-3.2.13/lib/active_support/dependencies.rb:494\r\n          const_missing at /Users/ckim/.rvm/gems/jruby-1.7.1/gems/activesupport-3.2.13/lib/active_support/dependencies.rb:192\r\n.\r\n.\r\n.\r\n</pre>\r\n\r\nIt turns out that at one point I created a mailer called `mail`.\r\n\r\n```bash\r\n# don't do this\r\n\r\n$ rails g mailer mail\r\n```\r\n\r\nOnce I deleted that file (`app/mailers/mail.rb`), my email starting working again.	2013-06-17 18:07:35.368822	2013-06-17 18:12:11.592532	2013-06-17 22:07:06
53	Screenflow Helping My Coding	I got [Screenflow](http://www.telestream.net/screenflow/) a couple of weeks ago.  At first I wanted to create screencasts where I show something interesting but then I realized I can use it to better my coding.  When I was creating the Tic Tac Toe screencast, I made several attempts before I finally got it down without any serious errors.  Screenflow was really good at showing me where I went wrong.\r\n\r\nOn my first attempt, I made an error by forgetting to wrap my RSpec test inside of a `it` clause.  I managed to continue through and finish the code but I was on the wrong track.  I thought I called an incorrect matcher.  It wasn't until I showed it to Meagan when she pointed out that I missed the `it` clause.\r\n\r\nAnother benefit of using Screenflow is that you can speed up the video by 3.3x the speed.  You can record yourself programming for the past hour and look back on what you did.\r\n\r\nIt might be a good idea to use Screenflow when I'm learning a new language or installing something for the first time.  I can play it back and see where I went wrong and I can write a How-To article without having to keep track of my notes.	2013-06-21 16:16:35.889281	2013-06-21 16:17:13.76211	2013-06-21 20:06:50
54	Tic Tac Toe Rails In JRuby	I've been working on my JRuby implementation of the Tic Tac Toe Rails program with a Clojure back-end.  It's been taking me a lot longer than I expected and it's partially due to using JRuby.  The problem with JRuby is that a lot of gems don't work.  Sometimes it installs but it's only after using it that you notice some features seem to be broken (Spork with Cucumber/RSpec, Email with Devise) or it just doesn't install at all.  On top of that, the startup time is a bit slower since it has to start the JVM.  It makes developing on it very painful.\r\n\r\nThe other reason why it was taking longer was because I thought the hard part was the Clojure back-end that runs the TTT engine.  That turned out to be the easy part.  The interface gave me some challenges.  I used CoffeeScript.  The language is pretty simple.  I ran into silly little errors such as\r\n\r\n```js\r\nsetTimeout(myfunc, 500)  // runs fine\r\n\r\nsetTimeout(-> myfunc, 500)  // does not work\r\nsetTimeout(-> myfunc(), 500)  // this is what it should be\r\n\r\n// this is what it would look like in javascript\r\nsetTimeout(function() {\r\n    myfunc();\r\n}, 500)\r\n```\r\n\r\nSince the first two lines look very similiar so my eye didn't catch it until much later.\r\n\r\nI have CSS and HTML issues (I still don't know why my page is more than a screenful when everything fits on the page).  It didn't start off that way.  It looked perfect when I made the TTT game but when I added more pages to it so I can add a login screen and a game request, things shifted around a bit and now it needs to be revisited.  I need to finish up the rest of the features so that'll have to wait.\r\n\r\nI'm almost done with this project.  I have email requests being sent out.  I need to re-use my TTT interface so it can play a move and email back to the opponent.  I have thought about re-implementing this in MRI Ruby and forking off a process to run the clojure back-end but it's too late.  I'm 90% of the way there and I just want to finish this off as soon as possible.	2013-06-25 13:22:24.421678	2013-06-25 13:22:24.421678	2013-06-25 16:54:00
89	autoreload gem	I'm writing an http server and I make small modifications to the code, such as displaying certain items.  The problem is that I have to stop the server and run it each time.  This can get quite annoying if you need to do this serveral times when you're tweaking something.\r\n\r\nYou can get around this problem by using the `autoreload` gem.\r\n\r\n```ruby\r\nrequire "autoreload"\r\nautoreload(interval: 2) do\r\n  require "./myserver"\r\nend\r\n\r\nmyserver = MyServer.new\r\nmyserver.start\r\n```\r\n\r\n`myserver.rb`:\r\n\r\n```ruby\r\nclass MyServer\r\n  def foo\r\n    1\r\n  end\r\n  def start\r\n    loop do\r\n      puts foo\r\n      sleep 2\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nWhen you run this, you'll see 1's being printed.  Keep the code running and modify `myserver.rb` so that `foo` returns `2`.  The running code will now display 2 instead of 1.\r\n\r\nThis is a great time saver.  If you do anything that causes an exception, the running program will terminate.	2013-07-10 13:51:58.992271	2013-07-10 13:51:58.992271	2013-07-10 17:39:58
87	Ruby Data Handling Between Threads	Let's say that I want to have two threads.  The main thread is waiting for the worker thread to do a computation, which is expected to take some time.\r\n\r\n```ruby\r\n  x = nil\r\n  Thread.new { sleep 1; x = 100; }\r\n  sleep 100 while x.nil?\r\n  puts "x = #{x}"\r\n```\r\n\r\nThis code is not efficient because the `x` will be set in 1 second but the while loop checks every 100 seconds, so if the thread has not completed by the time it gets to the check, it'll have to wait the whole 100 seconds\r\n\r\nUsing `Thread#wakeup`\r\n---------------------\r\nA better method to let another thread know that the data is ready is by using the `wakeup` instance method for Thread.\r\n\r\n```ruby\r\n  x = nil\r\n  Thread.new { sleep 1; x = 100; Thread.main.wakeup() }\r\n  sleep 100 while x.nil?\r\n  puts "x = #{x}"\r\n```\r\n\r\nNow when the data is ready, the worker thread can notify the main thread immediately.  We can even have the main thread just stop completely and wait until the data is ready instead of polling the variable to see if it was set.  This is useful if the check is expensive.\r\n\r\n```ruby\r\n  x = nil\r\n  Thread.new { sleep 1; x = 100; Thread.main.wakeup() }\r\n  Thread.stop\r\n  puts "x = #{x}"\r\n```\r\n\r\nA problem with this method is that the notification is happening at the thread level.  If you have multiple variables you want to check, you have to handle it yourself.  You also have the complication of what happens when the `wakeup` is called but the main thread is not in the waiting state.\r\n\r\n**NOTE**:  If you call `Thread.stop`, make sure that there is not another thread calling `join` on that thread.  You will get a `deadlock detected (fatal)`.\r\n\r\nUsing `ConditionVariable`\r\n-------------------------\r\n\r\n`ConditionVariable` works with `Mutex`.\r\n\r\n```ruby\r\n  require 'thread'\r\n  x = nil\r\n  m = Mutex.new\r\n  cond = ConditionVariable.new\r\n  Thread.new { m.synchronize { sleep 1; x = 100; cond.signal } }\r\n  m.synchronize do\r\n    cond.wait(m)\r\n    puts "x = #{x}"\r\n  end\r\n```\r\n\r\nThe `cond.wait(m)` has an optional argument if you want a timeout, e.g. `cond.wait(m, 100)`.\r\n\r\nThis code is not that much different.  Don't be fooled by `synchronize` because you could also create mutexes in the `Thread` example.  Also it's quite annoying since you have to keep track of two variables (`Mutex` and `ConditionVariable` instances `m` and `cond`).  However, in the following code, you can get around that by using `MonitorMixin`.\r\n\r\n```ruby\r\n  require 'monitor'\r\n  x = nil\r\n  x.extend(MonitorMixin)\r\n  change_cond = x.new_cond\r\n  Thread.new do\r\n    sleep 1\r\n    x.synchronize do\r\n      x = 100\r\n      change_cond.signal\r\n    end\r\n  end\r\n  x.synchronize do\r\n    change_cond.wait_while { x.nil? }\r\n    puts "x = #{x}"\r\n  end\r\n```\r\n\r\nInstead of `change_cond.wait_while { x.nil? }`, you can use `change_cond.wait(100)` if you want to wait a specific amount of time.\r\n\r\nQueue\r\n-----\r\nProbably the best way is to use `Queue`.\r\n\r\n```ruby\r\n  require 'thread'\r\n  x = nil\r\n  q = Queue.new\r\n  Thread.new { sleep 1; q.push(100) }\r\n  x = q.pop\r\n  puts "x = #{x}"\r\n```\r\n\r\nIf the queue is empty when you call `pop`, it will wait until something is pushed into the queue.  There are many aliases for the methods `push` and `pop`\r\n\r\n```ruby\r\n  # these do the same thing as push\r\n  q.push 100\r\n  q.enq 100\r\n  q << 100\r\n\r\n  # These are the same as pop\r\n  q.pop\r\n  q.deq\r\n  q.shift\r\n```\r\n\r\n`Queue` does not have a method that takes a timeout, but you can get around that by using `Timeout::timeout`.\r\n\r\n```ruby\r\n  require 'thread'\r\n  require 'timeout'\r\n  x = nil\r\n  q = Queue.new\r\n  Thread.new { sleep 5; q.push 100 }\r\n  begin\r\n    Timeout::timeout(1) do\r\n      x = q.pop\r\n    end\r\n    puts "x = #{x}"\r\n  rescue\r\n    puts "timed out"\r\n  end\r\n```\r\n\r\n`Timeout::timeout` will raise a `Timeout::Error` exception if the block does not complete within the timeout, so you'd need to handle it with a rescue.\r\n\r\nIn general, I'll probably use the `Queue` in my future code since it reads better.\r\n	2013-07-06 18:42:55.372947	2013-07-07 00:27:48.738205	2013-07-06 22:41:30
47	TTT Rails Problems - Livereload, CSS	One thing I hate about JRuby is that you keep encountering broken gems.  Livereload is one of those.  I have guard running and installed livereload for guard and the browser.  It looked like it should work because I saw the guard message that the browser had connected.  As soon as I make a change, it breaks.  Of course the next step is to set up a dummy MRI ruby instance and set up livereload again to see if it's a problem with my setup.  I do that and it works fine.  No problems.  I made sure I did the exact same steps in JRuby, even uninstalling and reinstalling gems.  It still didn't work.  After an hour or so, determined that the gem is broken.  I tried to see if there were other gems, perhaps a jruby version.  I found one on Github, but it too was broken.  I wasted a lot of time on this.  This is one major drawback to using JRuby.\r\n\r\nAnother problem I had today was with CSS.  Let's say you had\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <style type="text/css" media="all">\r\n    #whole {\r\n      width: 100%;\r\n      height: 100%;\r\n      background-color: red;\r\n    }\r\n  </style>\r\n<body>\r\n  <div id="whole"></div>\r\n</body>\r\n</html>\r\n```\r\n\r\nYou'd expect to see a flood of red on your screen.  Instead you see nothing.  If you take away the <code>&lt;!DOCTYPE html&gt;</code>, then it works.  If you keep the doctype, you can also get it to work by setting the `html` and `body` sizes.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <style type="text/css" media="all">\r\n    html, body {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n    #whole {\r\n      width: 100%;\r\n      height: 100%;\r\n      background-color: red;\r\n    }\r\n  </style>\r\n<body>\r\n  <div id="whole"></div>\r\n</body>\r\n</html>\r\n```\r\n\r\nSeems like <code>&lt;!DOCTYPE html&gt;</code> defines the `body` and `html` to have height zero until there is content.  This one issue took a while to figure out because I kept stripping my HTML down until it was basically nothing.\r\n\r\nOne good thing was I got my project going along.  I incorporated Alejandra's images and the background for the website.  I accidentally deleted the files she had created for me, but I remembered that I had Time Machine and went back and fetched it.  It was the first time I used Time Machine.  Now it has become part of my toolset.	2013-06-04 10:22:24.491357	2013-07-24 14:54:00.28273	2013-06-04 14:05:18
90	Autotest In Python	In Python, there is a testing framework called `nose` and it's fairly easy to use.\r\n\r\n<pre>\r\n$ pip install nose\r\n</pre>\r\n\r\nCreate a file and create a function with a name starting with `test` (for example `test`, `testFoo`, `test_foo`)\r\n\r\n**myfile.py**\r\n\r\n```python\r\ndef test():\r\n  x = 1\r\n  assert x == 2\r\n```\r\n\r\nThis test should fail.  Run it\r\n\r\n<pre>\r\n$ nosetests myfile.py\r\nF\r\n======================================================================\r\nFAIL: myfile.test\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File "/usr/local/lib/python2.7/site-packages/nose/case.py", line 197, in runTest\r\n    self.test(*self.arg)\r\n  File "/Users/ckim/lang/python/myfile.py", line 3, in test\r\n    assert x == 2\r\nAssertionError\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.002s\r\n\r\nFAILED (failures=1)\r\n</pre>\r\n\r\nA passing test looks like this:\r\n\r\n```bash\r\n$ nosetests myfile.py\r\n.\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.000s\r\n\r\nOK\r\n```\r\n\r\nThere is another package called `sniffer`\r\n\r\n<pre>\r\n$ pip install sniffer\r\n</pre>\r\n\r\nDepending on your operating system, you'll want to download one of these file system checkers (otherwise it will poll your file system, which would be slower):\r\n\r\n* Linux: pyinotify\r\n* Windows: pywin32\r\n* Mac: MacFSEvents\r\n\r\nBy default sniffer will run a nose test, but it can be configured to run any other framework or run some custom code.  Here's how to run it with nose\r\n\r\n<pre>\r\n$ sniffer -x myfile.py\r\n</pre>\r\n\r\nWhenever you change your code, the test will run and you can see the results immediately.  The `-x` argument is passed to the testing framework (in this case `nose`).\r\n\r\nIf you want to read more, you can go to [the github repository](https://github.com/jeffh/sniffer) and read the README.rst\r\n	2013-07-15 22:02:24.509625	2013-07-15 22:09:37.725499	2013-07-16 01:38:11
91	Review of "Test-Driven Development By Example"	The book is written in three parts\r\n\r\n  * Part I: Money Example\r\n  * Part II: The xUnit Example\r\n  * Part III: Patterns for Test-Driven Development\r\n\r\nThe Money Example takes a simple problem of implementing other\r\ncurrencies into a system that takes dollars.  It would make for a\r\ninteresting kata and it's something that should be seen, rather\r\nthan read.  The idea follows the pattern\r\n\r\n1. Quickly add a test.\r\n2. Run all tests and see the new one fail.\r\n3. Make a little change.\r\n4. Run all tests and see them all succeed.\r\n5. Refactor to remove duplication.\r\n\r\nThe problem is that it doesn't show you the errors, so it feels\r\nless like the implementation is driven by the test.  It still feels\r\nlike there is a lot of planning ahead of time to get the test to\r\npass.  For example, it implements supporting code before it writes\r\nthe code under test.  I would like to have seen errors such as\r\n"class not defined" and "method not defined", etc...  When you fix\r\nthose problems, you get closer to a design, thus making it feel\r\n"test-driven".  Much of the book is a description of what he's\r\ndoing, it would be better if I was watching a screencast with a\r\nvoiceover explaining as he was going along.\r\n\r\nAnother problem with this book is that since there is so many changes\r\nto the code, you have a hard time knowing what is th current state of\r\nthe code.  You see snippets of the new code, so you have to go back\r\nto see what has changed.  A book is probably not the right format\r\nfor this exposition.\r\n\r\nThe xUnit was very confusing.  I had a hard time following this section even when I was writing code along with it.  The project he chose was to implement a testing framework while using\r\nTDD.  It was difficult to know whether the method he was writing\r\nwas part of the test or was the subject of the test.  He had a class\r\ncalled `WasRun`, which had a flag to see if the test was run, but\r\nit also kept flags to see if things were set up.  The class name\r\nadded to the confusion. It wasn't clear which method `WasRun` was tracking. \r\n\r\nWhen I finished reading the xUnit section, I didn't leave it knowing\r\nany more than the Money section.  I do have experience with TDD and\r\nI felt that the book is a bit dated.  Reading `assertEquals(0, foo())`\r\nreminded me of times long past where today I would see it as\r\n`foo().should == 0`.  If I had an array, I would need to say `assertArrayEquals(expected, actual)` whereas `actual.should == expected` reads better.  Using the "should" method makes it clear which is the expected and which is the actual.  If I had said `assertEquals(x,y)`, it isn't clear which is the expected and which is the actual.  You would have to know the API to understand.  Getting it wrong can lead to misleading error messages.  The "should" method allows many kinds of matchers such as `foo().should be_nil`, `foo().should be_true`, `foo().should include([1,2,3])`, and lets you define your own.\r\n\r\nThe third part of the book contained some useful information.  It\r\nmentions Pluggable Object.  The idea being that if you have code\r\nthat looks like\r\n\r\n```java\r\npublic void mouseDown() {\r\n  selected = findFigure()\r\n  if (selected != null)\r\n    select(selected);\r\n}\r\npublic void mouseMove() {\r\n  if (selected != null)\r\n    move(selected);\r\n  else\r\n    moveSelectionRectangle();\r\n}\r\npublic void mouseUp() {\r\n  if (select != null)\r\n    selectAll();\r\n}\r\n```\r\n\r\nYou can make it look like this:\r\n\r\n```java\r\npublic void mouseDown() {\r\n  selected = findFigure();\r\n  if (selected != null)\r\n    mode = SingleSelection(selected)\r\n  else\r\n    mode = MultipleSelection()\r\n}\r\npublic void mouseMove() {\r\n  mode.mouseMove();\r\n}\r\npublic void mouseUp() {\r\n  mode.mouseUp();\r\n}\r\n```\r\n\r\nThe point being that after the initial setup, the logic is simplified by calling the appropriate method on the object and let the object handle the event instead of having the logic in the event handler.  The code looks cleaner because event code does not have magical `if` conditions making the programmer wonder why there is a special case.  Moving the code around is much easier too because you don't have to worry about bugs because you forgot to add that special case.\r\n\r\nA lot of the other patterns seems like common sense.  I've read\r\n"The RSpec Book", which mentions BDD and TDD.  It does a better job\r\nof explaining the TDD methodologies.  The TDD book was published\r\nin 2003.  I suppose at the time, it was fresh and innovative, but\r\nafter having spent some time with TDD as well as tools more suitable\r\nfor it (rather than xUnit), the book has shown its age.	2013-07-17 19:01:23.534	2013-07-24 13:15:48.60324	2013-07-17 23:00:47
94	Reflections on Implementing From An Existing RSpec	I've been writing RSpec code first and implementing the actual code.  I go back and forth until the program is done.  I had a thought.  What would it be like if I took someone else's RSpec and started implementing it.  I wanted something small, so I asked a co-worker if I could take her rspec and see what I come up with.  I wanted to write a minimal program that will pass her test.\r\n\r\nBefore getting started, I turned off the RSpec config to run in random ordering.  This way I can work on one spec at a time in order.  Usually tests are built up as you go down the file, so this should make it easier to implement.\r\n\r\n```ruby\r\nRSpec.configure do |config|\r\n  config.treat_symbols_as_metadata_keys_with_true_values = true\r\n  config.run_all_when_everything_filtered = true\r\n  config.filter_run :focus\r\n  # config.order = 'random'\r\nend\r\n```\r\n\r\nAfter getting set up with my development environment, I started to run the RSpec using Guard.  The first set of errors were all about non-existant files.  I created empty files, bringing me to the next set of errors.  I wrote the empty classes and empty methods.  I just followed mechanically from one error to the next.\r\n\r\nWhen there was a non-matching expectation, I looked at how the test was set up to get a clue about what the method was supposed to do.  If it was expecting a list, I gave it an empty list.  If there was an expectation that a method was called, I made sure it's included within the code.  This was probably the hardest part -- to reverse engineer the logic based on the expectations.\r\n\r\nWhen I finally got it to pass, I ran the main ruby code.  It gave errors about missing `require` files.  This was because the RSpec had required all the files in the lib directory as part of the configuration.  It's always a good idea to require only the list of files within RSpec that you'd expect the main code to require.  If you include all the lib files, as in this case, then you may find missing required files when you run the main code.\r\n\r\nAfter I put in all the missing requires. I started getting `nil` errors.  This was because tests didn't check for all necessary instance variables after the initialization.\r\n\r\nThe next error was "wrong number or parameters".  How could this be?  It passed all the tests.  How was it possible that RSpec did not catch this.  I started digging through the code and found that it was due to use of doubles.  Doubles supply dummy code to make the testing easier.  In this case, it was used more than necessary because it skipped over this erroneous code.\r\n\r\nI stopped making corrections because there must be something wrong with the tests if I get all these errors were happening after having passed the tests.\r\n\r\nThis was a good learning experience for me.  From an existing RSpec file, I was able to make it pass from looking at the specs.  In this way RSpec really is self documenting.  It would've been nice if I had it working at the end.\r\n	2013-07-31 10:20:35.712792	2013-07-31 10:21:44.959695	2013-07-30 23:29:37
95	Book Review: Agile Estimating and Planning	I've just finished a wonderful book, "Agile Estimating And Planning"\r\nby Mike Cohn.  At first, I wasn't sure what this book could teach\r\nme because I saw estimating as just an informed way of guessing.\r\nCohn has done a remarkable job of laying out the foundations on\r\nestimating effort and time.\r\n\r\nTraditional planning has failed for a variety of reasons.  Work is\r\nbroken down into tasks and a Gantt chart is drawn up.  When there\r\nis a delay in one task, it will cause a delay on all the tasks that\r\ndepend on it.  Since the work is broken down by tasks, there is no\r\nsense of their importance, so figuring out what to drop when the\r\ndeadline approaches becomes difficult.  The individuals responsible\r\nfor implementing the feature is asked to create an estimate, which\r\ncauses a problem if that person is not available the whole duration\r\nfor that task.  It is difficult to come up with good estimates\r\nbecause more effort you put into estimating doesn't necessarily\r\nmake your estimates better.\r\n\r\nThe book proposes that we should work cooperatively.  We start by\r\nestimating the size of the story (a description of a feature) in\r\ncomparison to other features (figuring that something is twice as\r\nbig as something else is a lot easier than trying to figure out how\r\nlong it would take to implement them).  You make estimates based\r\non the story itself, not by how one individual would get it done\r\nbecause you never know if that person would be called off to do\r\nsomething else.  You work is organized by features not by tasks so\r\neveryone works together to make sure that feature works.  When you\r\norganize it by tasks it puts the burden on the person responsible\r\nfor it.\r\n\r\nAnother important theme of the book is to work on the most important\r\nstories first.  The importance is determined by the customer.  Each\r\nstory has a value to ther customer and each iteration should add\r\nimmediate value to the project.\r\n\r\nAfter you have a good set of stories, the group take on as much\r\nwork as they can handle for an iteration (set as two or four weeks,\r\nthe group decides).  At the end of the iteration, you can see how\r\nwell you did on your estimates, so the next time you can adjust the\r\nnumber of points for the next iteration.  Once you have an idea of\r\nthe number of points you can do for an iteration (the velocity), you\r\ncan estimate estimate how long it would take to do a release.  The\r\nformula is (total story points)/(velocity) = number of iterations .\r\nThe author takes the idea further by introducing buffers.  There\r\nare feature buffers and schedule buffers.  For feature buffers, you\r\nadd in all the mandatory features and buffer it with optional\r\nfeatures that you'll work on if time permits.  For schedule buffers,\r\nyou add a buffer to the schedule so you don't miss a deadline. This\r\nis done by taking the number of points a story would be if there\r\nis a 50% chance of completion and if there is a 90% chance.  You\r\nfind the difference and square them.  You total up these values for\r\nthe rest of the stories in your iteration and find the square root.\r\nThat would be the number of points you need for a buffer.\r\n\r\nThe book also has ideas on solving some issues that may come up,\r\nsuch as splitting stories, how to come to a consensus on the number\r\nof points for a story, how long should your iterations be, what\r\nactually determines a story, categorizing features (must-haves,\r\nexciters, linear) what to do when you are partially finished (you\r\ndon't get points until it's completely finished), and how to keep\r\ntrack of the progress.\r\n\r\nAll the ideas come together at the end of the book in a fictional\r\ncase study.  The author does an excellent job running through a\r\nsimple story of a group faced with a new project and trying out the\r\nagile methodologies.  Stories are created and sized, questions are\r\nasked and answered, an iteration is completed, a release is estimated\r\nand progress report is given.  I really enjoyed the book.  It's\r\ndefinitely something you should have in your collection.\r\n	2013-08-10 08:47:52.944358	2013-08-10 08:47:52.944358	2013-08-10 12:47:22
96	Grunt	I downloaded the (https://github.com/jzaefferer/jquery-validation)[jQuery Validation plugin) from github and I thought it would be easy to get it installed.  Usually when I download javascript, I just needed to copy the javascript files and I'm done.  This time around I was really puzzled.  The index.html in the demo directory contained this line:\r\n\r\n```html\r\n<script src="../dist/jquery.validate.js"></script>\r\n```\r\n\r\nbut that directory didn't exist.  What is going on?  I looked at the project root directory and found `Gruntfile` and saw some json files.  After a bit of googling, I  discovered that grunt is a build system for javascript.\r\n\r\nYou run\r\n\r\n```bash\r\n$ npm install\r\nnpm http GET https://registry.npmjs.org/grunt-contrib-qunit\r\nnpm http GET https://registry.npmjs.org/grunt-contrib-compress\r\nnpm http GET https://registry.npmjs.org/grunt-contrib-jshint\r\nnpm http GET https://registry.npmjs.org/grunt\r\nnpm http GET https://registry.npmjs.org/grunt-contrib-watch\r\nnpm http GET https://registry.npmjs.org/grunt-contrib-uglify\r\nnpm http GET https://registry.npmjs.org/grunt-contrib-concat\r\nnpm http 200 https://registry.npmjs.org/grunt-contrib-qunit\r\nnpm http GET https://registry.npmjs.org/grunt-contrib-qunit/-/grunt-contrib-qunit-0.2.2.tgz\r\n...\r\n```\r\n\r\nThis looks for a file `package.json` which contains a description of the necessary packages to include much like a `Gemfile` in ruby.\r\n\r\nNext, you run `grunt`\r\n\r\n```bash\r\neuler:jquery-validation ckim$ grunt\r\nRunning "concat:dist" (concat) task\r\nFile "dist/jquery.validate.js" created.\r\nFile "dist/additional-methods.js" created.\r\n\r\nRunning "jshint:files" (jshint) task\r\n>> 86 files lint free.\r\n\r\nRunning "jshint:test" (jshint) task\r\n>> 4 files lint free.\r\n\r\nRunning "jshint:grunt" (jshint) task\r\n>> 1 file lint free.\r\n\r\nRunning "qunit:files" (qunit) task\r\nTesting test/index.html ....................................................%o has no name assigned [object HTMLInputElement]\r\n%o has no name assigned [object HTMLInputElement]\r\n%o has no name assigned [object HTMLInputElement]\r\n%o has no name assigned [object HTMLInputElement]\r\n....................................................................................................................OK\r\n>> 949 assertions passed (3581ms)\r\n\r\nDone, without errors.\r\neuler:jquery-validation ckim$\r\n```\r\n\r\nAs you can see the `dist` directory is created and tests were run.  Now you're all set.  You can copy the files from the `dist` directory and you're ready to go!	2013-08-19 18:18:24.626258	2013-08-19 18:18:24.626258	2013-08-19 22:02:52
93	Ruby Debugging	To start debugging in ruby 1.9, you need the gem `debugger` (see [github repository](https://github.com/cldwalker/debugger))\r\n\r\n**Gemfile**\r\n\r\n```ruby\r\nsource "https://rubygems.org"\r\n\r\ngem "debugger"\r\n```\r\n\r\n**yourcode.rb**\r\n\r\n```ruby\r\nrequire "debugger"\r\n\r\ndef my_function\r\n  debugger    # <== place debug point by putting this in your code\r\n  x = 1\r\nend\r\n```\r\n\r\nYou can also do it in one shot:\r\n\r\n```ruby\r\ndef my_function\r\n  require "debugger"; debugger\r\n  x = 1\r\nend\r\n```\r\n\r\nBecause the breakpoint is in your code, you can put logic around it\r\n\r\n```ruby\r\ndef my_function\r\n  debugger if foo == 3 && !bar\r\n  x = 1\r\nend\r\n```\r\n\r\nYou should put `debugger` before the desired breakpoint because it will stop on the next statement after a call to `debugger`.  If you put it at the end of function, you may end up in a different file, wherever the stack frame happen to be after the function returns.\r\n\r\nYou run your code the same way as you did before, the difference is that you'll be placed into a interactive ruby debugger.\r\n\r\nPeople have injected `pry` into their code to put an interactive shell so they can look around (This is done by `require "pry"` and calling `binding.pry` in the code).  `pry` is powerful and it can be used for some types of debugging, but it's not a debugger.  You are not able to step through your code.  Within `debugger`, have access to the ruby interpreter so you have most of the functionality you need.  So if you used `pry` in the past, you should try out `debugger`.\r\n\r\nOnce you're inside the debugger, you can type "help" or just "h".\r\n\r\n```bash\r\n(rdb:1) h\r\nruby-debug help v1.6.1\r\nType 'help <command-name>' for help on a specific command\r\n\r\nAvailable commands:\r\nbacktrace  delete   enable  help  list    ps       save    start   undisplay\r\nbreak      disable  eval    info  method  putl     set     step    up\r\ncatch      display  exit    irb   next    quit     show    thread  var\r\ncondition  down     finish  jump  p       reload   skip    tmate   where\r\ncontinue   edit     frame   kill  pp      restart  source  trace\r\n```\r\n\r\nYou can also type "h set" to see options available\r\n\r\n```bash\r\n(rdb:1) h set\r\nModifies parts of the ruby-debug environment. Boolean values take\r\non, off, 1 or 0.\r\nYou can see these environment settings with the "show" command.\r\n\r\n--\r\nList of set subcommands:\r\n--\r\nset annotate -- Set annotation level\r\nset args -- Set argument list to give program being debugged when it is started\r\nset autoeval -- Evaluate every unrecognized command\r\nset autolist -- Execute 'list' command on every breakpoint\r\nset autoirb -- Invoke IRB on every stop\r\nset autoreload -- Reload source code when changed\r\nset basename -- Report file basename only showing file names\r\nset callstyle -- Set how you want call parameters displayed\r\nset debuggertesting -- Used when testing the debugger\r\nset forcestep -- Make sure 'next/step' commands always move to a new line\r\nset fullpath -- Display full file names in frames\r\nset history -- Generic command for setting command history parameters\r\nset linetrace+ -- Set line execution tracing to show different lines\r\nset linetrace -- Set line execution tracing\r\nset listsize -- Set number of source lines to list by default\r\nset trace -- Display stack trace when 'eval' raises exception\r\nset width -- Number of characters the debugger thinks are in a line\r\n```\r\n\r\nYou can put these commands into a `.rdebugrc` file.  You can also require ruby files so it'll load automatically when the debugger is run.  I always have "autolist" set so I can see the code listing while I am stepping through the code.  You should also set autoeval so you can type ruby code (e.g. "a = 2") rather than typing "eval" (e.g. "eval a = 2") or using "p" to print the value.\r\n\r\nSome useful commands\r\n\r\n* n : to go to the next statement\r\n* s : to step into the statement\r\n* c : continue\r\n* fin : to finish the method and stop at the next stack trace\r\n* p <expr>: print out result of ruby expression\r\n* pp <expr>: pretty print result of ruby expression.  It prints list and hashes in a more readable format\r\n* bt : a backtrace to tell you where you are (you can also use "where")\r\n \r\nYou can exit by typing "exit", "q", or press Ctrl-d.\r\n\r\nWhen you're debugging something complicated, it's a good idea to put some print statements to see what your program is doing, but you may not want to have to clean it up every time.  I solve this by creating a `Logger` class that takes a `debug` method.  It will only print if the debug flag is set.  This is especially useful when you're dealing with multiple threads or when you're not sure where to put the breakpoint.\r\n\r\nI think you should try `debugger` out.  It's worth learning.\r\n	2013-07-24 14:31:34.382459	2013-07-24 14:37:09.357532	2013-07-24 17:39:55
98	Trouble With Gem	I've been getting this error when I try to install a gem:\r\n\r\n```bash\r\nERROR:  Could not find a valid gem 'pry' (>= 0), here is why:\r\n          Unable to download data from https://rubygems.org/ - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (https://s3.amazonaws.com/production.s3.rubygems.org/latest_specs.4.8.gz)\r\n```\r\n\r\nMy solution was to reinstall my ruby instances via:\r\n\r\n```bash\r\n$ rvm list   # to get the list of ruby versions\r\n\r\n$ rvm reinstall 2.0.0 --with-openssl-dir=$rvm_path/usr\r\n```\r\n\r\n	2013-10-04 05:04:59.056512	2013-10-04 05:04:59.056512	2013-10-04 08:49:25
97	Using Katas To Improve	Some Background Thoughts\r\n------------------------\r\n\r\nThere is an experiment from Richard Held and Alan Hein who raised\r\nkittens in total darkness.  For a short period during the day, the\r\nkittens were placed in a carousel apparatus where the lights were\r\nturned on.  One basket allowed the kitten to see and interact with\r\nits environment (the active kitten).  The other had a hole for the\r\nhead so the kitten (the passive kitten) can have the same visual\r\nexperience but without the interaction.\r\n\r\n![Hein and Held kitten experiment](http://fabien.benetou.fr/pub/illustrations/KittenCarousel.png)\r\n\r\nAt the end of the experiment, the passive kitten was functionally\r\nblind whereas the active kitten was normal.\r\n\r\nThis idea has stuck with me.  The idea that you need to interact with\r\nyour environment.  You are functionally blind when you only have book\r\nknowledge.  I need to code (and code a lot) to really get that\r\nknowledge at the instinctive level.\r\n\r\nIt is also important to do things quickly to develop fluency. Fluency\r\nallows you the freedom from the mechanics of what you are doing so you\r\ncan focus on the main ideas.\r\n\r\nFirst Kata Experiment\r\n---\r\n\r\nWhen I joined 8th Light, I came across katas.  The idea of a kata\r\nis to practice coding by doing it repetitively.  You build muscle\r\nmemory in the mechanics of coding -- setting up the editor, reacting\r\nto errors, letting your fingers get used to the controls.  Initially\r\nI thought it was an amusing little activity.  Then I started to\r\nwonder if I can do a kata on something more than coin-changer or\r\nroman numerals, something with a little more substance.  I thought it\r\ncould be possible to write tic-tac-toe as a kata.  My main goal is to\r\ndevelop a workflow so I can write it under an hour.  I also wanted to\r\nrecord myself and bought Screenflow.  After all, the kata is meant to\r\nbe a performance.\r\n\r\nI did my first tic-tac-toe kata in ruby, a language I know well.  I\r\nused RSpec has my testing framework, something I was less familiar\r\nwith.\r\n\r\nIn the beginning I spent a lot of time setting up my testing\r\nenvironment and researching the web when I got stuck.  For example, I\r\nforgot to add an "it" block in RSpec.  It generated an error message I\r\ncouldn't understand.  I worked around it by making the test pass.  I\r\ndidn't figure it out until the next day when a co-worker (Meagan)\r\npointed it out after she saw the video of my kata.\r\n\r\nI saw myself steadily improve in my next version of the kata.  I made\r\n6 attempts before I was finally able to do it in less than an hour.  I\r\nwas able to interpret error messages better.  I was able to set up my\r\ntesting environment faster.  I improved my code by finding more\r\nelegant ways to solve a problem.  For instance, if I wanted to\r\nseparate a list into groups of 3, I would write:\r\n\r\n{% highlight ruby %}\r\nlst.group_by.with_index {|e,i| i/3}.values\r\n{% endhighlight %}\r\n\r\nAfter having writing it several times, I thought there's probably a\r\nbetter way.  I finally came up with:\r\n\r\n{% highlight ruby %}\r\nlst.each_slice(3).to_a\r\n{% endhighlight %}\r\n\r\nI don't know if I would have revisited this problem if it weren't for\r\nthe kata.\r\n\r\nI also saw the effect when I forgot to add a test.  This brings\r\nanother important point.  I saw probably every type of error/bug\r\nbecause each time I do a kata, I make different mistakes.  You get a\r\nricher experience from it.  You're able to focus on the source of the\r\nerror/bug rather than wonder about the correctness of your code, after\r\nall, your code is similar to your previous versions so you know it\r\n*should* have worked.  You can always use diff to compare your\r\nversions if you get completely stuck.\r\n\r\nSince the kata is repetitive, it allows you to reflect on how you use\r\nyour editor.  You wonder if there is a better way to get from one\r\npoint to another.  You can test out new keystrokes and see if it makes\r\na difference.\r\n\r\nIn the end, I would say the kata has vastly improved my workflow.\r\n\r\nUsing Kata To Learn A New Language\r\n------\r\nI tried another experiment.  What would it be like to use a kata to\r\nlearn a new language?  Would I be able to do get it done under an\r\nhour?  I tried it out with Haskell.\r\n\r\nI've heard people mention Haskell so I wanted to give it a go.  The\r\nfirst step was to find a resource to read up on it.  I read through\r\n[Learn You A Haskell](http://learnyouahaskell.com/).  After a few\r\ndays, I was ready to start coding.  Just like the passive kitten, I\r\nwas functionally blind.  I knew about Haskell, but I couldn't code it.\r\nI needed to interact with the language.  What better way than to do a\r\nkata?\r\n\r\nI already had a set of routines I wanted to code and I knew the\r\nalgorithm.  The only thing standing in my way was the language and the\r\nkata gives me a controlled environment so I can focus on it.  It also\r\ngave me a good way to reflect on the problems I encountered.  Since\r\nyour errors are recorded, I didn't have to remember things I need to\r\nlook into or remember what error messages lead me to a particular fix.\r\nIt's like having superhuman memory.\r\n\r\nAfter I got the setup for testing out of the way (using HSpec), syntax\r\nbecame my main problem.  Every time I wrote something, I would get\r\nparse errors.  I would backtrack to a simpler form until I got it to\r\nwork.  After about an hour, I was only able to write a constructor.  I\r\nalso had to set up guard (for automatic testing), which took up a good\r\nchunk of time.  I kept my recordings to about an hour for the rest of\r\nmy katas whether I finished or not.\r\n\r\nWhen I reviewed the video of my first kata, I saw long pauses where I\r\nwas thinking about a particular issue.  Then I saw myself researching\r\nand eventually solving the problem.  The video reinforced everything I\r\nhad learned.  I didn't have to take notes or remember how the problem\r\noriginated.  It was all recorded for me.  This allowed me the freedom\r\nto try new techniques and go beyond my comfort zone.  I can always\r\nreview it and see where things went wrong.\r\n\r\nWhen you learn a new language, you have a feeling that you know enough\r\nto do small things but you have the uneasy feeling that your knowledge\r\nis tenuous, that it can slip away from you if you're not paying\r\nattention.  That feeling started to evaporate on the second kata.  I\r\ndeveloped idioms so I can do things automatically.  That gave me a\r\nbase to build on.  By the third kata, the video showed a steep\r\nincrease in my performance.  I was no longer hesitating and going off\r\nto Google.  I was still making a lot of errors, but they were\r\ndifferent errors.  The ones I had encountered before were quickly\r\ndismissed since I've already solved it in the past.\r\n\r\nSince I was new to the language, I was not able to complete the\r\nprogram in the early katas.  It did give me a good research points\r\nwhen I finished recording.  I knew at least that I can get to the same\r\npoint as the previous kata.  I needed just a little bit more knowledge\r\nto go further.  It is very encouraging when you can see yourself\r\nactually improve over each version.\r\n\r\nIt took me 10 tries before I was able to get a complete working\r\nversion of my code.  I was able to do it just a little over my hour\r\ntarget.  I sped up the time on my Screenflow so it played for a bit\r\nover 16 minutes.  When I tried uploading it to YouTube, it got\r\nrejected because they had a limit of 15 minutes.  I knew I had to\r\nshave off 20 minutes so my video can run in 14 minutes.  I was already\r\ntyping as fast as I could.  Then I realized that I could use the\r\nabbreviate command in vim.  I made it so when I type "p", it will type\r\nout "position" and that will save me keystrokes.  I would add these\r\nabbreviations as I went along.  I spent my off-kata time looking into\r\nshortcuts in vim.\r\n\r\nI did some unrecorded katas to test out some new key bindings and some\r\nconfig changes for vim.  My 13th kata was the charm.  I was able to finish in\r\na little under 50 minutes, which gave my time-compressed video to 14\r\nminutes.  I uploaded it to YouTube and was approved finally.\r\n\r\nI encourage everyone to try using katas to improve their workflow.\r\nYou'll be amazed at what you can get accomplished.\r\n\r\n<iframe width="420" height="315" src="//www.youtube.com/embed/P0_rIm9ntiQ?rel=0" frameborder="0" allowfullscreen></iframe>\r\n\r\n	2013-09-04 11:09:53.789254	2013-10-04 06:27:04.134795	2013-09-04 15:08:29
\.


--
-- Name: blog_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: vxposqabxsgjnr
--

SELECT pg_catalog.setval('blog_entries_id_seq', 98, true);


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: vxposqabxsgjnr
--

COPY schema_migrations (version) FROM stdin;
20130423075603
20130423095528
20130423142114
20130423145433
20130423171909
20130503052119
\.


--
-- Data for Name: todo_entries; Type: TABLE DATA; Schema: public; Owner: vxposqabxsgjnr
--

COPY todo_entries (id, item, completed, created_at, updated_at) FROM stdin;
2	Add memoization of board positions	f	2013-04-23 10:14:52.88237	2013-04-23 10:14:52.88237
3	Make 4x4 tic-tac-toe version	f	2013-04-23 10:15:22.82285	2013-04-23 10:15:22.82285
4	Make 3x3x3 tic-tac-toe version	f	2013-04-23 10:15:50.105666	2013-04-23 10:15:50.105666
5	Make connect four version of tic-tac-toe	f	2013-04-23 10:16:11.322862	2013-04-23 10:16:11.322862
6	Make Mac OS X app version of tic-tac-toe in Objective-C	f	2013-04-23 10:17:21.576696	2013-04-23 10:17:21.576696
7	Alter evaluate so that test of win is done in move	f	2013-04-25 16:52:09.772641	2013-04-25 16:52:09.772641
\.


--
-- Name: todo_entries_id_seq; Type: SEQUENCE SET; Schema: public; Owner: vxposqabxsgjnr
--

SELECT pg_catalog.setval('todo_entries_id_seq', 7, true);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: vxposqabxsgjnr
--

COPY users (id, email, encrypted_password, reset_password_token, reset_password_sent_at, remember_created_at, sign_in_count, current_sign_in_at, last_sign_in_at, current_sign_in_ip, last_sign_in_ip, created_at, updated_at, confirmation_token, confirmed_at, confirmation_sent_at, unconfirmed_email, is_admin) FROM stdin;
2	rick.winfrey@gmail.com	$2a$10$RC4Hx92.9zc6DgeFRamVMOpBpiE.GxA59Ksaypz4jricE3DJ/XFtK	\N	\N	\N	1	2013-08-17 18:37:36.873072	2013-08-17 18:37:36.873072	107.206.76.9	107.206.76.9	2013-08-17 18:37:19.060043	2013-08-17 18:37:36.874316	\N	2013-08-17 18:37:36.866008	2013-08-17 18:37:19.059692	\N	f
3	dudymas@gmail.com	$2a$10$lfhynI89arlJYRFohhX0B.va5Qnh96jetQ1ZEFwi7ofpCiMf/S9x6	\N	\N	\N	1	2013-09-28 16:07:14.146408	2013-09-28 16:07:14.146408	173.170.106.206	173.170.106.206	2013-09-28 16:06:21.194692	2013-09-28 16:07:14.152031	\N	2013-09-28 16:07:14.135127	2013-09-28 16:06:21.194342	\N	f
1	chongkim@yahoo.com	$2a$10$geOtAsriywl6pUnjcj287.oiVB6ntP4TrIAbACFJVMPnZPTHlCOu2	\N	\N	2014-02-02 19:58:26.910871	34	2014-02-02 19:58:26.946738	2013-10-04 04:49:07.798002	72.186.108.35	72.186.108.35	2013-04-23 18:43:55.707266	2014-02-02 19:58:26.960103	\N	2013-04-23 18:53:27.087609	2013-04-23 18:43:55.701425	\N	t
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: vxposqabxsgjnr
--

SELECT pg_catalog.setval('users_id_seq', 3, true);


--
-- PostgreSQL database dump complete
--

